I"”<h1 id="part-1-alpine-ski-house">Part 1: Alpine Ski House</h1>

<h2 id="references">References</h2>

<ul>
  <li>Example project: https://github.com/AspNetMonsters/AlpineSkiHouse</li>
</ul>

<h2 id="chapter-1-how-we-got-here">Chapter 1: How we got here</h2>

<h3 id="aspnet-mvc">ASP.NET MVC</h3>

<h4 id="editor-and-view-templates">Editor and View templates</h4>

<p>The power of user controls not initially available in MVC, but rectified by the introduction of <strong>editor and view templates</strong>. Fantasic and underused. Allows you to assign a template to a view in a model. When Razor needs to show an editor or view for a particular field, checks for a special template.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Html.DisplayFor(model =&gt; model.StartDate)
@Html.EditorFor(model =&gt; model.StartDate)
</code></pre></div></div>

<p>Either defined by convention OR by annotating a field in the model with a UIHint</p>

<h4 id="filters">Filters</h4>

<p>A filter is an annotation either to a controller or an action method and can intercept and change any request, adding or updating data or changing the flow of the request. Often used by security e.g. <code class="highlighter-rouge">[Authorize]</code>.</p>

<h4 id="middleware">Middleware</h4>

<p>Middleware, built on the OWIN standard, largely replaces custom IIS modules.</p>

<h3 id="web-api">Web API</h3>

<ul>
  <li>Initially used WCF with a set of rational default, but subsequently morphed into vanilla Web API project</li>
  <li>Very similar to MVC project, but with Views and other UI elements missing. Action names in Controllers correspond to HTTP verbs e.g. Get() and Post().</li>
  <li>Like WCF, supports self hosting, so possible to bin deploy.</li>
  <li>One of the first open source projects from Microsoft</li>
  <li>Much of the functionality is mirrored in ASP.NET MVC, can bend MVC controllers to perform as Web API</li>
  <li>Can by used alongside ASP.NET MVC in the same project</li>
</ul>

<h3 id="aspnet-core">ASP.NET Core</h3>

<ul>
  <li>Next evolution</li>
  <li>Not only open source, but developed using GitHub. See https://github.com/aspnet/home</li>
  <li>Far more reaching modernization effort designed to make ASP.NET competitive with other popular web frameworks e.g. Node, Elixr, Go</li>
  <li>Goes hand in hand with modernisation efforts on .NET runtime: .NET Core</li>
  <li>Worthy of at least one book!!!!</li>
</ul>

<h2 id="chapter-2-influences">Chapter 2: Influences</h2>

<h3 id="rails">Rails</h3>

<ul>
  <li>Rails emerged from the 37 signals company in the early 2000s, used to build Basecamp and open sourced by its creators</li>
  <li>Revolutionary at the time, despite MVC being a pattern from the 70s</li>
  <li>Highly opinionated using convention over configuration which ASP.NET also utilised e.g.
    <ul>
      <li>any public method returning an <code class="highlighter-rouge">ActionResult</code> is a public endpoint</li>
      <li><code class="highlighter-rouge">Index</code> method is default route for a controller</li>
      <li><code class="highlighter-rouge">View</code> method without arguments uses naming rules to locate .cshtml file to render</li>
    </ul>
  </li>
  <li>Routing was fundamental to Rails - flexible URLs</li>
  <li><code class="highlighter-rouge">ActiveRecord</code> models which were used from UI to database</li>
</ul>

<h3 id="nodejs">Node.js</h3>

<ul>
  <li>Event-driven, multi-platform, single-threaded runtime for JavaScript</li>
  <li>Many tools in ASP.NET core build process actually use Node</li>
  <li>Influential in the development of ASP.NETâ€™s web socket implementation, SignalR
    <ul>
      <li>popularised the idea of server push and WebSockets for real time communication using <code class="highlighter-rouge">socket.io</code> package</li>
    </ul>
  </li>
</ul>

<h3 id="angular-and-react">Angular and React</h3>
<h3 id="open-source">Open source</h3>
<h3 id="owin">OWIN</h3>

:ET