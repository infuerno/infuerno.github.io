I"‡ <h2 id="resources">Resources</h2>

<ul>
  <li>https://learn.hashicorp.com/terraform/?track=azure#azure</li>
  <li>https://shell.azure.com/ - online shell</li>
  <li>https://www.terraform.io/docs/providers/azurerm/ - Azure RM provider documentation</li>
  <li>https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/CHANGELOG.md - release log for Azure provider</li>
</ul>

<h1 id="install-terraform">Install Terraform</h1>

<ul>
  <li>Download from https://www.terraform.io/downloads.html</li>
  <li>Unzip to e.g. C:\Tools</li>
  <li>Add to PATH</li>
</ul>

<h1 id="create-configuration">Create Configuration</h1>

<ul>
  <li><code class="highlighter-rouge">provider</code> block configures the provider - can use Azure and AWS in the same file - common practice - full list of providers: https://www.terraform.io/docs/providers/index.html (A LOT!!)</li>
  <li><code class="highlighter-rouge">resource</code> block requires type and name (used to reference the resource later in the configuration)</li>
</ul>

<h1 id="build-infrastructure">Build Infrastructure</h1>

<ul>
  <li><code class="highlighter-rouge">terraform init</code> automatically downloads providers - set TF_DATA_DIR to download plugins / state etc to non working directory: https://www.terraform.io/docs/commands/environment-variables.html#tf_data_dir</li>
  <li><code class="highlighter-rouge">terraform apply</code> generates and displays the execution plan (without saving)</li>
  <li><code class="highlighter-rouge">terraform plan</code> generates an execution plan</li>
  <li><code class="highlighter-rouge">terraform state list</code> list resources</li>
  <li><code class="highlighter-rouge">terraform state show [xxx]</code> shows the current state for [xxx] - this contains very important information - required for terraform to know about the current state - consider using remote state (https://www.terraform.io/docs/state/remote.html)</li>
</ul>

<h1 id="change-infrastructure">Change Infrastructure</h1>

<ul>
  <li><code class="highlighter-rouge">terraform apply</code> apply any new changes in .tf file to the infrastructure</li>
  <li><code class="highlighter-rouge">terraform show</code> to see current state of the infrastructure</li>
</ul>

<h1 id="deploy-infrastructure">Deploy Infrastructure</h1>

<ul>
  <li><code class="highlighter-rouge">terraform destroy</code> destroys all elements in the infrastructure (as though all resources were removed from the .tf file had been blanked out)</li>
</ul>

<h1 id="resource-dependencies">Resource Dependencies</h1>

<ul>
  <li>Interpolation syntax allows referencing other values. Use <code class="highlighter-rouge">${}</code> e.g. <code class="highlighter-rouge">${aws_instance.web.id}</code>.</li>
  <li>Format is usually: <code class="highlighter-rouge">TYPE.NAME.ATTRIBUTE</code></li>
  <li>If a resource is countable (has the <code class="highlighter-rouge">count</code> attribute set), reference individual resources by index e.g. <code class="highlighter-rouge">${aws_instance.web.0.id}</code></li>
  <li>Get a list using the splat syntax e.g. <code class="highlighter-rouge">${aws_instance.web.*.id}</code></li>
  <li>See: https://www.terraform.io/docs/configuration-0-11/interpolation.html</li>
  <li>Terraform will automatically work out dependencies by studying the resource attributes used in interpolation expressions. Thus it can determine the correct order in which to create resources. This is the PRIMARY way to inform Terraform of these dependencies - use where possible.</li>
</ul>

<h1 id="provision">Provision</h1>

<p>Terraform provisioners help you do additional setup and configuration when a resource is created or destroyed. You can move files, run shell scripts, and install software.</p>

<ul>
  <li>DO NOT USE instead of configuration management tool to maintain state and configuration for existing resources. Use chef, ansible, DSC.</li>
  <li>Consider Packer for creating custom images where the image is managed as code as an alternative approach</li>
  <li>Provisioners are defined on resources, usually new resources just being provisioned</li>
  <li>Nevertheless, the <code class="highlighter-rouge">null_resource</code> is available (which also allows the <code class="highlighter-rouge">depends_on</code> attribute to help control flow)</li>
  <li>Provisioners are only run during CREATE or DESTROY - but NOT UPDATE (either create OR destroy OR both). e.g. <code class="highlighter-rouge">when = "destroy"</code>.</li>
  <li>If provisioning fails the resources will be marked <code class="highlighter-rouge">taint</code>ed. They will be destroyed and recreated on the next <code class="highlighter-rouge">apply</code>.</li>
</ul>

<h1 id="input-variables">Input Variables</h1>

<ul>
  <li>Variables are specified and can be given default values in a file <code class="highlighter-rouge">variables.tf</code></li>
  <li>Variable values can be set from another file either <code class="highlighter-rouge">terraform.tfvars</code> or <code class="highlighter-rouge">*.auto.tfvars</code> (or specify using <code class="highlighter-rouge">-var-file</code>), or from command line <code class="highlighter-rouge">-var</code> for relevant commands (<code class="highlighter-rouge">plan</code>, <code class="highlighter-rouge">apply</code>, <code class="highlighter-rouge">refresh</code>)</li>
  <li>For secrets create a secrets file locally and use <code class="highlighter-rouge">-var-file</code> to load it</li>
  <li>Multiple files can be specified e.g. <code class="highlighter-rouge">terraform apply -var-file='secret.tfvars' -var-file='production.tfvars'</code></li>
  <li>Environment variables of the value <code class="highlighter-rouge">TF_VAR_name</code> will be read e.g. <code class="highlighter-rouge">TF_VAR_location</code> to set the value of <code class="highlighter-rouge">location</code></li>
  <li>Variable type can be string, list, map</li>
  <li>Lists can specify type either implicitly or explicitly e.g. <code class="highlighter-rouge">variable "cidrs" { default = [] }</code> or <code class="highlighter-rouge">variable "cidrs" { type = "list" }</code></li>
  <li>Maps can be defined implicitly by specifying a default value which is a map, using <code class="highlighter-rouge">default = {}</code>, or explicitly</li>
  <li>Apply variables from a map using the <code class="highlighter-rouge">lookup</code> function e.g. <code class="highlighter-rouge">sku = "${lookup(var.sku, var.location)}"</code> or <code class="highlighter-rouge">${var.sku["uksouth"]}</code></li>
</ul>

<h1 id="output-variables">Output Variables</h1>

<ul>
  <li>Use to output information and data resulting from the infrastructure provisioning e.g. IP addresses</li>
  <li>Define e.g.
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>`output "ip" {
value = "${azurerm_public_ip.publicip.ip_address}"
}`
</code></pre></div>    </div>
  </li>
  <li>Automatically printed following <code class="highlighter-rouge">terraform apply</code></li>
  <li>Can additionally be queried using <code class="highlighter-rouge">terraform output [output-var-name]</code></li>
</ul>

<h1 id="modules">Modules</h1>

<p>Terraform modules are self-contained packages of Terraform configurations that are managed as a group. Modules are used to create reusable components, improve organization, and to treat pieces of infrastructure as a black box. e.g. <code class="highlighter-rouge">network</code> module, <code class="highlighter-rouge">compute</code> module.</p>

<ul>
  <li>As with resource blocks, a module block requires a name</li>
  <li>The only mandatory attribute is source, the location of the module in e.g. the official Terraform Registry, a private registry, directly from Git, Mercurial, HTTP or local files</li>
  <li>Following the addition of modules, rerun <code class="highlighter-rouge">terraform init</code> to retrieve modules. <code class="highlighter-rouge">-upgrade</code> checks for any newer versions of existing modules and providers</li>
  <li>Module outputs are often used as the input to other modules using <code class="highlighter-rouge">${module.NAME.OUTPUT}</code></li>
</ul>

<h1 id="remote-state-storage">Remote State Storage</h1>

<p>Supports team based workflows via remote backends.</p>
:ET