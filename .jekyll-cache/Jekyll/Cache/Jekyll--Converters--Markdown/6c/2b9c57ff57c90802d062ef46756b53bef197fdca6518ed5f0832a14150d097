I"†<<h1 id="section-1-getting-started-38min">Section 1: Getting Started (38min)</h1>

<ul>
  <li>To install bootstrap: <code class="highlighter-rouge">npm install --save bootstrap@3</code></li>
  <li>Update path to css files in <code class="highlighter-rouge">angular.json</code> i.e.</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"styles": [
  "node_modules/boostrap/dist/css/bootstrap.min.css",
  "src/styles.css"
],
</code></pre></div></div>

<h1 id="section-2-the-basics-1hr-54min">Section 2: The Basics (1hr 54min)</h1>

<h2 id="how-an-angular-app-gets-loaded-and-started">How an Angular App gets loaded and started</h2>
<ul>
  <li>The first file to be loaded is <code class="highlighter-rouge">main.ts</code></li>
  <li>This in calls <code class="highlighter-rouge">platformBrowserDynamic().bootstrapModule(AppModule)</code></li>
  <li><code class="highlighter-rouge">AppModule</code> is defined in the imports as <code class="highlighter-rouge">import { AppModule } from './app/app.module';</code></li>
  <li>Within <code class="highlighter-rouge">app.module.ts</code> the @NgModule directive has <code class="highlighter-rouge">AppComponent</code> in the <code class="highlighter-rouge">bootstrap</code> array</li>
  <li>At this point the <code class="highlighter-rouge">AppComponent</code> is parsed and the selector <code class="highlighter-rouge">app-root</code> is analysed</li>
  <li>Angular is now able to handle the <code class="highlighter-rouge">&lt;app-root&gt;</code> tag in the index.html</li>
</ul>

<h2 id="creating-a-new-component">Creating a New Component</h2>

<ul>
  <li>Create a subfolder in <code class="highlighter-rouge">app</code> for the component and name the folder the same as the component name e.g. <code class="highlighter-rouge">server</code></li>
  <li>When choosing a selector - it must be unique. e.g. <code class="highlighter-rouge">app-server</code></li>
  <li>Angular does not scan all files, so the new component MUST be registered with <code class="highlighter-rouge">AppModule</code>. It is registered in the <code class="highlighter-rouge">declarations</code> array.</li>
  <li>A component HAS to have either a <code class="highlighter-rouge">templateUrl</code> property OR a <code class="highlighter-rouge">template</code> property specifying inline HTML</li>
  <li>The <code class="highlighter-rouge">styleUrl</code> property is optional, but styles can also be inline by instead using the <code class="highlighter-rouge">styles</code> property (array of strings)</li>
  <li>The <code class="highlighter-rouge">selectors</code> property works in a similar way to css selectors
    <ul>
      <li>The default <code class="highlighter-rouge">app-root</code> style expression needs to be represented by an element <code class="highlighter-rouge">&lt;app-root&gt;&lt;/app-root&gt;</code></li>
      <li><code class="highlighter-rouge">[app-root]</code> can instead reference an attribute e.g. <code class="highlighter-rouge">&lt;div app-root&gt;&lt;/div&gt;</code></li>
      <li><code class="highlighter-rouge">.app-root</code> can reference a class e.g. <code class="highlighter-rouge">&lt;div class="app-root"&gt;&lt;/div&gt;</code></li>
      <li>Note: id doesn‚Äôt work, nor :hover type psuedo etc</li>
    </ul>
  </li>
</ul>

<h2 id="data-binding">Data Binding</h2>
<ul>
  <li>Output data: business logic (typescript) -&gt; template (HTML)
    <ul>
      <li>String interpolation e.g. ``</li>
      <li>Property binding e.g. <code class="highlighter-rouge">[property]='data'</code> (square brackets around HTML attributes)</li>
    </ul>
  </li>
  <li>Input data: template -&gt; business logic
    <ul>
      <li>Event binding e.g. <code class="highlighter-rouge">(event)='expression'</code> e.g. a click event</li>
    </ul>
  </li>
  <li>Two-way data binding
    <ul>
      <li>e.g. <code class="highlighter-rouge">[(ngModel)]='data'</code></li>
    </ul>
  </li>
</ul>

<h3 id="string-interpolation">String Interpolation</h3>
<ul>
  <li><code class="highlighter-rouge">{{ }}</code> - use a typescript expression between the curly braces e.g. the name of a property in the component class</li>
  <li>Can alternatively add any expression which can in the end be interpreted as a string</li>
</ul>

<h3 id="property-binding">Property Binding</h3>
<ul>
  <li>Can often use either string interpolation OR property binding e.g. <code class="highlighter-rouge">&lt;p&gt;&lt;p&gt;</code> OR <code class="highlighter-rouge">&lt;p [innerText]='allowNewServer'&gt;&lt;/p&gt;</code></li>
  <li>Don‚Äôt mix the two!</li>
  <li>Can bind to HTML elements (as above), but can also bind to directives and components</li>
</ul>

<h3 id="event-binding">Event Binding</h3>
<ul>
  <li>Can bind to all the events available to the HTML element (remove the ‚Äúon‚Äù at the beginning) e.g. <code class="highlighter-rouge">(click)</code>, <code class="highlighter-rouge">(mouseEnter)</code> etc</li>
  <li>Google for a complete list of properties and events for a particular HTML element (e.g. on the MDN site: https://developer.mozilla.org/en-US/docs/Web/API/Element)</li>
  <li>The <code class="highlighter-rouge">input</code> event is available on <code class="highlighter-rouge">&lt;input&gt;</code> HTML elements and is fired whenever the value changes e.g. on every keystroke</li>
  <li><code class="highlighter-rouge">$event</code> is a special variable which holds the data which was captured about the event e.g. the click event‚Äôs data contains the co-ordinates</li>
  <li><code class="highlighter-rouge">event.target</code> references the HTML element which this input event was fired on (which in turn has a <code class="highlighter-rouge">value</code> property containing the text of the element)</li>
  <li>If the value is saved to a local variable, this can be referenced by a read only HTML element, thereby achieving a two-way binding effect..</li>
</ul>

<h3 id="two-way-data-binding">Two Way Data Binding</h3>
<ul>
  <li>The <code class="highlighter-rouge">FormsModule</code> is required for two way binding (enabling the <code class="highlighter-rouge">ngModel</code> directive)</li>
  <li>Combine property and event binding</li>
  <li>Instead of <code class="highlighter-rouge">&lt;input type="text" (input)="onUpdateServerName($event)"&gt;</code> use <code class="highlighter-rouge">&lt;input type="text" [(ngModel)]="serverName"&gt;</code></li>
</ul>

<h2 id="directives">Directives</h2>
<ul>
  <li>Can build own directives, typically using attribute selectors e.g. <code class="highlighter-rouge">&lt;p appTurnGreen&gt;my app&lt;/p&gt;</code></li>
  <li>Then <code class="highlighter-rouge">@Directive({selector:'[appTurnGreen]'}) export class TurnGreenDirective { ... }</code> etc</li>
  <li>Built in directives include <code class="highlighter-rouge">*ngIf</code>, <code class="highlighter-rouge">*ngFor</code> - the <code class="highlighter-rouge">*</code> indicates it is a structural direction which changes the structure of the DOM
    <ul>
      <li><code class="highlighter-rouge">*ngIf</code> can be used with <code class="highlighter-rouge">else</code> by using <code class="highlighter-rouge">&lt;ng-template #ref&gt;</code> where #ref is used to reference the template in the else e.g. <code class="highlighter-rouge">&lt;p *ngIf="xx; else #ref"&gt;</code></li>
      <li><code class="highlighter-rouge">ngStyle</code> is a directive. We can bind to a property of this directive using <code class="highlighter-rouge">[ngStyle]</code> in order to apply styles conditionally. This property requires an object to bind to, so can use e.g. <code class="highlighter-rouge">&lt;p [ngStyle]="{backgroundColor: getColor()}"&gt;</code></li>
      <li><code class="highlighter-rouge">ngClass</code> works similarly to <code class="highlighter-rouge">ngStyle</code>, binding to a property which also takes an object i.e. using <code class="highlighter-rouge">[ngClass]="{}"</code> where the keys are the css class names and the values are the conditions</li>
      <li><code class="highlighter-rouge">*ngFor</code> iterates around a collection e.g. <code class="highlighter-rouge">&lt;li *ngFor="let item of items"&gt;&lt;/li&gt;</code></li>
      <li>Can additionally get the index of the item e.g. <code class="highlighter-rouge">&lt;li *ngFor="let item of items; let i = index"&gt; &lt;/li&gt;</code></li>
    </ul>
  </li>
</ul>

<h1 id="section-4-debugging-12min">Section 4: Debugging (12min)</h1>

<h2 id="sourcemaps">Sourcemaps</h2>
<p>Use the chrome developer tools to step through your typescript files, by going to the ‚ÄòSources‚Äô tab and then the webpack node. Under <code class="highlighter-rouge">.</code> are all the original typescript source code files which can be used to place breakpoints.</p>

<h2 id="augury">Augury</h2>
<p>Chrome extension which shows component map / routes / module dependencies</p>

<h1 id="section-5-components--databinding-deep-dive-1hr-25min">Section 5: Components &amp; Databinding Deep Dive (1hr 25min)</h1>

<ul>
  <li>HTML elements - native properties and events</li>
  <li>Directives - custom properties and events e.g. <code class="highlighter-rouge">ngStyle</code>, <code class="highlighter-rouge">ngClass</code></li>
  <li>Components - custom properties and events</li>
</ul>

<h2 id="binding-to-custom-properties">Binding to Custom Properties</h2>

<ul>
  <li>Add <code class="highlighter-rouge">@Input()</code> to a child component property to allow a parent component to <em>bind</em> to this property</li>
  <li>Expose a different name to the parent by using e.g. <code class="highlighter-rouge">@Input('srvElement')</code></li>
  <li>Pass the value in from the parent on the selector e.g. <code class="highlighter-rouge">&lt;add-server-detail [srvElement]="element"&gt;&lt;/add-server-detail&gt;</code></li>
</ul>

<h2 id="binding-to-custom-events">Binding to Custom Events</h2>

<ul>
  <li>Add <code class="highlighter-rouge">@Output()</code> to a child component property to allow emitting an event from this property - must be of type <code class="highlighter-rouge">EventEmitter</code> e.g. <code class="highlighter-rouge">@Output() serverCreated = new EventEmitter&lt;Server&gt;();</code></li>
  <li>Expose a different name to the parent by using e.g. <code class="highlighter-rouge">@Output('srvCreated')</code></li>
  <li>Call <code class="highlighter-rouge">emit</code> on this property when the event is to be triggered e.g. <code class="highlighter-rouge">this.serverCreated.emit(server);</code></li>
  <li>Bind to this event on the parent e.g. <code class="highlighter-rouge">&lt;server-add (serverCreated)="onServerCreated($event)"&gt;&lt;/server-add&gt;</code></li>
</ul>

<p>NOTE: components talking to each other via custom properties and events can start to become cumbersome, especially if not ‚Äúnext‚Äù to each other. Services is an alternative to decouple.</p>

<h2 id="view-encapsulation">View Encapsulation</h2>

<ul>
  <li>Angular achieves view encapsulation by appending an attribute e.g. <code class="highlighter-rouge">_ngcontent-ejo-1</code> to each element in a component. This emulates the concept of Shawdow DOM (not yet available in all browsers).</li>
  <li>This behaviour can be overriden by adding the property <code class="highlighter-rouge">encapsulation</code> to the <code class="highlighter-rouge">@Component</code> directive.
    <ul>
      <li>The default value is <code class="highlighter-rouge">ViewEncapulation.Emulated</code></li>
      <li>Set it to <code class="highlighter-rouge">ViewEncapsulation.None</code> to ensure encapsulation attributes are NOT added. Any styles defined in this component will now be applied globally (probably NOT what you want!).</li>
      <li>Set it to <code class="highlighter-rouge">ViewEncapsulation.Native</code> to use Shadow DOM technology.</li>
    </ul>
  </li>
</ul>

<h2 id="local-references-in-templates">Local References in Templates</h2>

<ul>
  <li>Use local references e.g. <code class="highlighter-rouge">#newServerName</code> on any HTML element in a template to then reference it by anywhere else e.g. <code class="highlighter-rouge">(click)="onServerCreate(newServerName.value)"</code> (Note - the whole element is referenced, hence may want to only pass e.g. <code class="highlighter-rouge">.value</code>)</li>
</ul>

<h1 id="section-6-course-project---components--databinding-31min">Section 6: Course Project - Components &amp; Databinding (31min)</h1>
<h1 id="section-7-directives-deep-dive-47min">Section 7: Directives Deep Dive (47min)</h1>
<h1 id="section-8-course-project---directives-7min">Section 8: Course Project - Directives (7min)</h1>
<h1 id="section-9-using-services--dependency-injection-44min">Section 9: Using Services &amp; Dependency Injection (44min)</h1>
<h1 id="section-10-course-project---services--dependency-injection-31min">Section 10: Course Project - Services &amp; Dependency Injection (31min)</h1>
<h1 id="section-11-changing-pages-with-routing-2hr-18min">Section 11: Changing Pages with Routing (2hr 18min)</h1>
<h1 id="section-12-course-project---routing-46min">Section 12: Course Project - Routing (46min)</h1>
<h1 id="section-13-understanding-observables-45min">Section 13: Understanding Observables (45min)</h1>
<h1 id="section-14-course-project---observables-6min">Section 14: Course Project - Observables (6min)</h1>
<h1 id="section-15-handling-forms-in-angular-apps-2hr-3min">Section 15: Handling Forms in Angular Apps (2hr 3min)</h1>
<h1 id="section-16-course-project---forms-1hr-15min">Section 16: Course Project - Forms (1hr 15min)</h1>
<h1 id="section-17-using-pipes-to-transform-output-37min">Section 17: Using Pipes to Transform Output (37min)</h1>
<h1 id="section-18-making-http-requests-1hr-41min">Section 18: Making Http Requests (1hr 41min)</h1>
<h1 id="section-19-course-project---http-34min">Section 19: Course Project - Http (34min)</h1>
<h1 id="section-20-authentication--route-protection-in-angular-2hr-12min">Section 20: Authentication &amp; Route Protection in Angular (2hr 12min)</h1>
<h1 id="section-21-dynamic-components-38min">Section 21: Dynamic Components (38min)</h1>
<h1 id="section-22-angular-modules--optimizing-angular-apps-1hr-37min">Section 22: Angular Modules &amp; Optimizing Angular Apps (1hr 37min)</h1>
<h1 id="section-23-deploying-an-angular-app-18min">Section 23: Deploying an Angular App (18min)</h1>
<h1 id="section-24-bonus-working-with-ngrx-in-our-project-8hr-33min">Section 24: Bonus: Working with NgRx in our Project (8hr 33min)</h1>
<h1 id="section-25-bonus-angular-universal-47min">Section 25: Bonus: Angular Universal (47min)</h1>
<h1 id="section-26-angular-animations-39min">Section 26: Angular Animations (39min)</h1>
<h1 id="section-27-adding-offline-capabilities-with-service-workers-27min">Section 27: Adding Offline Capabilities with Service Workers (27min)</h1>
<h1 id="section-28-a-basic-introduction-to-unit-testing-in-angular-apps-45min">Section 28: A Basic Introduction to Unit Testing in Angular Apps (45min)</h1>
<h1 id="section-29-angular-changes--new-features-28min">Section 29: Angular Changes &amp; New Features (28min)</h1>
<h1 id="section-30-course-roundup-2min">Section 30: Course Roundup (2min)</h1>
<h1 id="section-31-custom-project--workflow-setup-51min">Section 31: Custom Project &amp; Workflow Setup (51min)</h1>
<h1 id="section-32-bonus-typescript-introduction-for-angular-2-usage">Section 32: Bonus: TypeScript Introduction (for Angular 2 Usage)</h1>
:ET