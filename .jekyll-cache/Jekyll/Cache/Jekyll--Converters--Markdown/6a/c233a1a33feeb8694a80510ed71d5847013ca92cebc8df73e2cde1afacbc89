I"ÖA<p>Reference: <a href="http://rubykoans.com/">http://rubykoans.com/</a></p>

<h2 id="misc">Misc</h2>

<ul>
  <li><code class="highlighter-rouge">==</code> returns true if <code class="highlighter-rouge">obj</code> and <code class="highlighter-rouge">other</code> are the same. It is typically overridden to provide a more class specific meaning.</li>
  <li><code class="highlighter-rouge">equal?</code> shouldn‚Äôt be overriden and is used to determine object identity.</li>
  <li><code class="highlighter-rouge">eql?</code> if two objects refer to the same hash key. Subclasses often alias <code class="highlighter-rouge">eql?</code> to their overriden <code class="highlighter-rouge">==</code> method. <code class="highlighter-rouge">Numeric</code> types are an exception</li>
  <li><code class="highlighter-rouge">respond_to?(method_name)</code> can be called on any object to see if <code class="highlighter-rouge">obj</code> <em>responds</em> to a given method, by default only includes public methods. Returns false if not implemented, returns <code class="highlighter-rouge">respond_to_missing?</code> if not defined.</li>
  <li><code class="highlighter-rouge">select</code> takes a block and returns an array or an enumerator e.g. <code class="highlighter-rouge">["cat", "bat", "rat", "zat"].select { |w| w[/[cbr]at/ }</code> returns <code class="highlighter-rouge">["cat", "bat", "rat"]</code></li>
  <li>EVERY statement in ruby returns a value (hence implicit return values from methods)</li>
</ul>

<h2 id="assert">Assert</h2>

<ul>
  <li><code class="highlighter-rouge">assert</code> will assert the following statement is true e.g. <code class="highlighter-rouge">assert true</code>, <code class="highlighter-rouge">assert 2 + 2 == 4</code></li>
  <li><code class="highlighter-rouge">assert_equal [expected], [actual]</code> will assert the supplied parameters are equal, displaying an intelligent message if fails</li>
</ul>

<h2 id="nil">Nil</h2>

<p>Reference: <a href="http://lukaszwrobel.pl/blog/ruby-is-nil">http://lukaszwrobel.pl/blog/ruby-is-nil</a></p>

<p><code class="highlighter-rouge">nil</code> is an object, it is a singleton of the class <code class="highlighter-rouge">NilClass</code></p>

<blockquote>
  <p>Theoretically, nil values should be incomparable, just like it is in SQL. But for practical reasons and to spare memory, nil object was made a singleton. That is, there is always exactly one instance of the NilClass which can be simply referred to by typing <code class="highlighter-rouge">nil</code>.</p>
</blockquote>

<p><code class="highlighter-rouge">is_a?(class)</code> is an instance method which returns true if <code class="highlighter-rouge">class</code> is the class of <code class="highlighter-rouge">obj</code> or a superclass of <code class="highlighter-rouge">obj</code></p>

<p>A <code class="highlighter-rouge">begin</code> / <code class="highlighter-rouge">rescue</code> / <code class="highlighter-rouge">end</code> code block will catch an exception and allow you to deal with it</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>begin
  nil.some_method_nil_doesnt_know_about
rescue Exception =&gt; ex
  assert_equal NoMethodError, ex.class
  assert_match(/undefined method/, ex.message)
end
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">nil.nil?</code> only returns true when called on the object <code class="highlighter-rouge">nil</code></li>
  <li><code class="highlighter-rouge">nil.to_s</code> returns empty string, other methods such as <code class="highlighter-rouge">to_a</code> etc return empty objects or 0 etc</li>
  <li><code class="highlighter-rouge">nil.inspect</code> returns <code class="highlighter-rouge">"nil"</code></li>
</ul>

<p>To test if an object is nil call <code class="highlighter-rouge">nil?</code> e.g. <code class="highlighter-rouge">if myobject.nil? ...</code></p>

<p>TODO: why is it better to do this than test for <code class="highlighter-rouge">myobject == nil</code> ?</p>

<h2 id="objects">Objects</h2>

<ul>
  <li>Everything is an <code class="highlighter-rouge">Object</code></li>
  <li>All objects can be converted to strings (where 123 becomes ‚Äú123‚Äù, nil becomes ‚Äú‚Äù etc)</li>
  <li><code class="highlighter-rouge">inspect</code> can be called on any object and depending on the class will often override the default behaviour to return e.g. a string representation of an object (<code class="highlighter-rouge">to_s</code> is often aliased)</li>
  <li>Every object has an id - returned by calling the method <code class="highlighter-rouge">object_id</code>. <code class="highlighter-rouge">true</code>, <code class="highlighter-rouge">false</code>, <code class="highlighter-rouge">nil</code> and all <code class="highlighter-rouge">Fixnum</code>s have constant object ids</li>
</ul>

<h2 id="arrays">Arrays</h2>

<ul>
  <li>Define a new array using <code class="highlighter-rouge">Array.new</code></li>
  <li>Push a new item onto the end of an array using <code class="highlighter-rouge">&lt;&lt;</code> e.g. <code class="highlighter-rouge">array &lt;&lt; 333</code></li>
  <li><code class="highlighter-rouge">[]</code> is the Array retrieval operator</li>
  <li><code class="highlighter-rouge">array[index]</code> retrieves a single element, going forwards from 0 and backwards from -1 e.g. array[3]</li>
  <li>Returns <code class="highlighter-rouge">nil</code> if the index is out of range</li>
  <li><code class="highlighter-rouge">array[range]</code> retrieves every element identified by an index in the given range e.g. array[1..3]</li>
  <li><code class="highlighter-rouge">array[0...3]</code> would not include the element at index 3</li>
  <li><code class="highlighter-rouge">array[2..-1]</code> would try to retrieve a sub array which makes sense e.g. from the second element to the end</li>
  <li><code class="highlighter-rouge">array[start_index, length]</code> retrieves a sub array
    <ul>
      <li>Returns an empty array when the starting index is at the end of an array</li>
      <li>Returns <code class="highlighter-rouge">nil</code> when the starting index is out of range</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">at</code> can be used to index into an array (slightly faster)</li>
  <li><code class="highlighter-rouge">slice</code> can be used alternatively for <code class="highlighter-rouge">[]</code></li>
  <li><code class="highlighter-rouge">slice!</code> will remove the sliced items from the original array</li>
  <li>Use <code class="highlighter-rouge">push</code> and <code class="highlighter-rouge">pop</code> to append and remove items from the end</li>
  <li>Use <code class="highlighter-rouge">unshift</code> and <code class="highlighter-rouge">shift</code> to append and remove items from the beginning</li>
</ul>

<h2 id="arrays-and-assignment">Arrays and assignment</h2>

<ul>
  <li>Assign multiple values at once e.g. <code class="highlighter-rouge">x, y = [1, 2]</code></li>
  <li>The splat operator will gather up any unused elements e.g. <code class="highlighter-rouge">x, *y = [1, 2, 3, 4]</code> will assign 1 to x and [2, 3, 4] to y</li>
  <li>Swapping becomes <code class="highlighter-rouge">x, y = y, x</code></li>
</ul>

<h2 id="hashes">Hashes</h2>

<ul>
  <li>Define a new hash using <code class="highlighter-rouge">Hash.new</code> or using a literal e.g. hash = { :one =&gt; 1, :two =&gt; 2 }</li>
  <li><code class="highlighter-rouge">hash[:one]</code> retrieves value for a given key, or <code class="highlighter-rouge">nil</code> if the key doen‚Äôt exist</li>
  <li>Alternatively use <code class="highlighter-rouge">hash.fetch(:one)</code> (throws <code class="highlighter-rouge">KeyError</code> if the key doesn‚Äôt exist)</li>
  <li><code class="highlighter-rouge">hash1 == hash2</code> is true if the two hashes contain the same key / value pairs</li>
  <li><code class="highlighter-rouge">hash.keys</code> returns an array of the keys, <code class="highlighter-rouge">hash.values</code> returns an array of the values</li>
  <li>Merge two hashes using <code class="highlighter-rouge">hash1.merge(hash2)</code>. Any keys in both will be replaces by the values in <code class="highlighter-rouge">hash2</code></li>
  <li>Hashes have a default value that is returned when accessing keys that do not exist in the hash. This can be passed into <code class="highlighter-rouge">new</code> e.g. <code class="highlighter-rouge">Hash.new(0)</code>. If no default is set, <code class="highlighter-rouge">nil</code> is used.</li>
</ul>

<h2 id="strings">Strings</h2>

<ul>
  <li>Use either single or double quotes</li>
  <li>Only double quotes intepret escape characters e.g. ‚Äú\n‚Äù</li>
  <li>Only double quotes interpolate variables e.g. #{value} in the middle of a string will be replaced</li>
  <li>When needing a mixture of double and single quotes in the same string
    <ul>
      <li>Use backslashes  e.g. ` ‚ÄúHe said, "Don‚Äôt"‚Äù`</li>
      <li>Or use flexible quoting e.g. <code class="highlighter-rouge">%(He said, "Don't")</code>, %!He said, ‚ÄúDon‚Äôt‚Äù!<code class="highlighter-rouge">, %{He said, "Don't"}</code></li>
      <li>Flexible quotes can handle multiple lines</li>
      <li><code class="highlighter-rouge">&lt;&lt;EOS</code> and <code class="highlighter-rouge">EOS</code> can also be used to demarquate the start and finish of a string</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">+</code> is used to concatenate two strings
    <ul>
      <li><code class="highlighter-rouge">+=</code> will leave any original strings unmodified not involved in the operation</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">&lt;&lt;</code> can also be used to append to strings, but will also modify any original strings not involved in the operation</li>
  <li>Use <code class="highlighter-rouge">[]</code> to retrieve sub strings in the same way as for arrays</li>
  <li>Single characters can be written using a question mark e.g. <code class="highlighter-rouge">?a</code>. In older versions of ruby they are represented by numbers and are the same as the ASCII equivalent. In newer version, they are represented by strings.</li>
  <li>Split strings using <code class="highlighter-rouge">split</code>. Pass in a regex pattern for the pattern to split on e.g. <code class="highlighter-rouge">string.split(/:/)</code></li>
  <li>Join arrays of words using <code class="highlighter-rouge">join</code></li>
</ul>

<p>TODO - why do Ruby programmers favour ¬´¬†when building up strings?</p>

<h2 id="symbols">Symbols</h2>

<ul>
  <li>Symbols which are identical have the same object id</li>
  <li><code class="highlighter-rouge">Symbol.all_symbols</code> returns an array of all known symbols</li>
  <li>Symbols with spaces can be defined: <code class="highlighter-rouge">:"cats and dogs"</code></li>
  <li>Symbols using interpolation can be defined: <code class="highlighter-rouge">:"cats #{value} dogs"</code></li>
  <li>Symbols can also be interpolated in a string (to_s is implicitly called)</li>
</ul>

<p>TODO: Why is it not a good idea to dynamically create a lot of symbols?</p>

<h2 id="regular-expressions">Regular expressions</h2>

<ul>
  <li>Regular expressions are defined using forward slashes e.g. <code class="highlighter-rouge">/pattern/</code></li>
  <li>Regexps can be passed into the <code class="highlighter-rouge">[]</code> method on a string e.g. ‚Äúmy string‚Äù[/str/]. Will return the matching string or <code class="highlighter-rouge">nil</code></li>
  <li>As with all regular expressions the repetition operators: <code class="highlighter-rouge">*</code> (zero or more), <code class="highlighter-rouge">+</code> (one or more), <code class="highlighter-rouge">?</code> (optional) are greedy</li>
  <li>Left most charater wins e.g. <code class="highlighter-rouge">"abbccc az"[/az*/]</code> returns <code class="highlighter-rouge">"a"</code></li>
  <li><code class="highlighter-rouge">/\d+/</code> matches digits</li>
  <li><code class="highlighter-rouge">/\s+/</code> matches whitespace</li>
  <li><code class="highlighter-rouge">/\w+/</code> matches a single word (can include numbers and underscores)</li>
  <li><code class="highlighter-rouge">.</code> matches any non newline character</li>
  <li><code class="highlighter-rouge">^</code> negates patterns e.g. <code class="highlighter-rouge">/[^t]/</code> matches anything but not <code class="highlighter-rouge">t</code></li>
  <li>Capitalised versions of <code class="highlighter-rouge">\d</code>, <code class="highlighter-rouge">\s</code> and <code class="highlighter-rouge">\w</code> mean NOT i.e. <code class="highlighter-rouge">\D</code>, <code class="highlighter-rouge">\S</code> and <code class="highlighter-rouge">\W</code></li>
  <li><code class="highlighter-rouge">\A</code> anchors to the start of a string e.g. <code class="highlighter-rouge">/\Astart/</code></li>
  <li><code class="highlighter-rouge">\z</code> anchors to the end of a string e.g. <code class="highlighter-rouge">/end\z/</code></li>
  <li><code class="highlighter-rouge">^</code> anchors to the start of a line</li>
  <li><code class="highlighter-rouge">$</code> anchors to the end of a line</li>
  <li><code class="highlighter-rouge">\b</code> anchors to a word boundary</li>
  <li>Parentheses group content for repetition operators and also index multiple matches so they can be referenced individually e.g. <code class="highlighter-rouge">"Gray, James"[/(\w+), (\w+)/, 1]</code> returns <code class="highlighter-rouge">"Gray</code></li>
  <li>Variables can also be used to access captures e.g. <code class="highlighter-rouge">$1</code> access <code class="highlighter-rouge">"Gray"</code> above</li>
  <li><code class="highlighter-rouge">scan</code> finds all matches and returns an array e.g. <code class="highlighter-rouge">"one two-three".scan(/\w+/)</code> returns <code class="highlighter-rouge">["one", "two", "three"]</code></li>
  <li><code class="highlighter-rouge">sub</code> finds the first match and replaces it</li>
  <li><code class="highlighter-rouge">gsub</code> replaces all matches</li>
</ul>

<p>TODO: When would * fail to match?</p>

<h2 id="methods">Methods</h2>

<ul>
  <li>Methods can be called with or without parentheses (HOWEVER missing parentheses can be ambiguous)</li>
  <li>Passing the wrong number of arguments will cause an <code class="highlighter-rouge">ArgumentError</code></li>
  <li>Parameters can be assigned default values in the method definition e.g. <code class="highlighter-rouge">def method_with_defaults(a, b=:default_value)</code></li>
  <li>Pass a variable number of arguments using the splat operator e.g. <code class="highlighter-rouge">def method_with_var_args(*args)</code>. Here <code class="highlighter-rouge">args</code> will be of type <code class="highlighter-rouge">Array</code>.</li>
  <li>TODO check about implicit return values</li>
  <li>Return an explicit value using <code class="highlighter-rouge">return</code> e.g. <code class="highlighter-rouge">return :value</code></li>
  <li>Append <code class="highlighter-rouge">self.</code> to methods in the same class (optional)</li>
  <li><code class="highlighter-rouge">self.</code> cannot be used with private methods</li>
  <li>Arguments can be labelled with a keyword and then MUST have a default specified. Specify any values to be overriden using the keyword.</li>
</ul>

<h2 id="constants">Constants</h2>

<ul>
  <li>Constants outside a class must be referenced using double colons e.g. <code class="highlighter-rouge">::MyConstant</code></li>
  <li>Constants inside another class must be qualified with the class name e.g. <code class="highlighter-rouge">MyClass::MyConstant</code></li>
  <li>Nested classes inherit constants from enclosing classes</li>
  <li>Sub classes inherit constants from parent classes</li>
  <li>If both nested <em>and</em> sub classed, NESTED wins</li>
</ul>

<h2 id="control-statements">Control statements</h2>

<ul>
  <li><code class="highlighter-rouge">if</code> statements return values e.g. <code class="highlighter-rouge">result = "x is 5" if x == 5</code></li>
  <li><code class="highlighter-rouge">unless</code> is the opposite to <code class="highlighter-rouge">if</code> e.g. <code class="highlighter-rouge">result = "x not 5" unless x == 5</code></li>
  <li><code class="highlighter-rouge">break</code> can be used to break a loop e.g. <code class="highlighter-rouge">break if i % 2 == 0</code></li>
  <li><code class="highlighter-rouge">break</code> can return values e.g. <code class="highlighter-rouge">break i if i % 2 == 0</code></li>
  <li><code class="highlighter-rouge">next</code> can be used in a simlar way to continue to next iteration in a loop</li>
  <li></li>
</ul>

:ET