I"t<h2 id="interesting-things-about-ascii">Interesting things about ASCII</h2>

<p>Reference: <a href="https://cdn.cs50.net/2015/x/psets/0/pset0/pset0.html">https://cdn.cs50.net/2015/x/psets/0/pset0/pset0.html</a></p>

<ul>
  <li>0 is 0000000 - is the NIL character also used in C as the string termination character (or \0)</li>
  <li>127 is 1111111 - the DEL character since when using paper tape if you make a mistake, you can overwrite by punching holes in all places i.e. 1111111</li>
  <li>The first 30 characters after NIL are control characters</li>
  <li>32 is a space followed by several other punctuation characters</li>
  <li>48 to 57 are the decimal digits where 48 is 0 and represented by 0110000 in binary so that the last 4 digits follow their binary equiavlent</li>
  <li>65 to 90 are the upper case characters where 65 is A and represented by 1000001 in binary</li>
  <li>97 to 123 are the lower case characters where 97 is a and represented by 1100001 in binary so that conversion from upper case to lower case can be done by flipping just one bit</li>
</ul>

<h2 id="compilers">Compilers</h2>

<p>For clang there are 4 major steps done by the compiler:</p>

<ol>
  <li>Preprossing</li>
  <li>Compilation</li>
  <li>Assembling</li>
  <li>Linking</li>
</ol>

<h3 id="preprocessing">Preprocessing</h3>

<p>The preprocessor handles the preprocessor directives, i.e. lines beginning with a # e.g. #include, #define
To run clang to the preprocessing stage only pass the -E flag.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>clang -E hello.c &gt; hello2.c
</code></pre></div></div>

<h3 id="compilation">Compilation</h3>

<p>The compiler actually compiles the C program down to assembly.
To run clang to the compilation stage only pass the -S flag. Assembler code is very processor specific.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>clang -S hello2.c       # outputs hello2.s
</code></pre></div></div>

<h3 id="assembler">Assembler</h3>

<p>The assembler takes assembly code and outputs machine code. Pass clang the -c flag to only go as far as assembling.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>clang -c hello2.s       # or clang -c hello2.c, or clang -c hello.c
</code></pre></div></div>

<p>This is more of a translation than a compilation and it is relatively easy to translate from assembly to machine code with a translation table.</p>

<h3 id="linking">Linking</h3>

<p>Finally linking combines all object files into one file which can be executed. This is very system dependent. By specifying a series of .o files to clang, it won’t need to preprocess, compile or assemble these files again. If the source code includes standard library headers e.g. match.h, then this can be linked in using <code class="highlighter-rouge">-lm</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>clang -o hello2.o -lm
</code></pre></div></div>

<p>Note all -l flags must come at the end of the command.</p>

<h2 id="libraries">Libraries</h2>

<p>C libraries are typically distributed with two parts - a header file declaring all the functions in the library, and a binary file containing the implementations of the functions as an executable. Source code is not usually included. To use a library in another program, include a link to the header file in the source code and then link in the executable during compilation.</p>

<p>Header files for standard libraries are usually found in /usr/include and are included using angle brackets e.g. <code class="highlighter-rouge">#include &lt;stdio.h&gt;</code>.</p>

<p>Header files for other files are included using quotes e.g. <code class="highlighter-rouge">#include "myotherlibrary.h"</code>.</p>

<h2 id="clang">Clang</h2>

<p>A typical call to build a source file is:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>clang -ggdb3 -O0 -std=c99 -Wall -Werror mario.c  -lcs50 -lm -o mario
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">clang</code> is the name of the compiler (other options are <code class="highlighter-rouge">gcc</code>)</li>
  <li><code class="highlighter-rouge">-ggdb3</code> includes debugging information in the binaries so that it can be debugged by e.g. gdb</li>
  <li><code class="highlighter-rouge">-Wall</code> ensures all warning messages are shown</li>
  <li><code class="highlighter-rouge">-Werror</code> exits the compiler if there are any warning messages (default behaviour without this is to still build the code providing there are no errors)</li>
  <li><code class="highlighter-rouge">mario.c</code> is the name of the source code file to compile</li>
  <li><code class="highlighter-rouge">-lxxx</code> links in any other libraries required e.g. <code class="highlighter-rouge">-lm</code> links in math</li>
  <li><code class="highlighter-rouge">-o mario</code> specifies the executable should be named mario</li>
</ul>

<h2 id="precendence">Precendence</h2>

<ul>
  <li>Inner Parentheses Outward</li>
  <li>i++, i–</li>
  <li>*x, &amp;x    ++i, –i</li>
  <li>*, /, %</li>
  <li>+, -</li>
</ul>

:ET