I"„-
<h2 id="references">References</h2>

<p><a href="https://docs.angularjs.org/api">https://docs.angularjs.org/api</a></p>

<h2 id="overview">Overview</h2>

<p>Angular is a client-side JavaScript framework for adding interactivity to HTML. We add behaviour to the HTML using <code class="highlighter-rouge">directives</code>.</p>

<dl>
  <dt>Directives</dt>
  <dd>a marker on an HTML tag that tells Angular to run or reference some JavaScript code.</dd>
  <dt>Modules</dt>
  <dd>Encapsulates separate pieces of an Angular application, and defines dependencies.</dd>
</dl>

<p>app.js : <code class="highlighter-rouge">var app = angular.module('store', [])</code>
index.html : <code class="highlighter-rouge"><span class="nt">&lt;html</span> <span class="na">ng-app=</span><span class="s">"store"</span><span class="nt">&gt;</span></code> Runs this module when the document loads. The HTML inside the element with the <code class="highlighter-rouge">ng-app</code> tag then gets treated as an Angular app.</p>

<dl>
  <dt>Expressions</dt>
  <dd>Insert dynamic values into your HTML e.g. <code class="highlighter-rouge">I am {{4 + 6}}</code>, <code class="highlighter-rouge">{{"hello" + " you"}}</code></dd>
  <dt>Controllers</dt>
  <dd>Define application behaviour by defining functions and values</dd>
</dl>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app.controller('StoreController', function() {
    this.product = gem;
});

var gem = {...} // js object
</code></pre></div></div>

<ul>
  <li>Enclose all JavaScript inside an enclosure to be safe. e.g. <code class="highlighter-rouge">(function() { [code here] })();</code></li>
  <li>Controller names are always in CapitalCase and use the word Controller.</li>
  <li>Specify the name of the controller and an anonymous function (the constructor).</li>
  <li><code class="highlighter-rouge">product</code> is a property of the controller.</li>
  <li>Use the <code class="highlighter-rouge">ng-controller</code> directive to attach the controller to an HTML element.</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div ng-controller="StoreController as store"&gt;
    &lt;h1&gt;&lt;/h1&gt;
&lt;/div&gt;
</code></pre></div></div>
<h2 id="built-in-directives">Built-In Directives</h2>

<h3 id="ng-app">ng-app</h3>

<h3 id="ng-controller">ng-controller</h3>

<h3 id="ng-show">ng-show</h3>

<p>Element will be shown if the expression is true e.g. <code class="highlighter-rouge">&lt;button ng-show="store.product.isInStock"&gt;Add to Cart&lt;/button&gt;</code></p>

<h3 id="ng-hide">ng-hide</h3>

<p>Element will not be shown if the expression is true e.g. <code class="highlighter-rouge">&lt;div ng-hide="store.product.isInStock"&gt; ... &lt;/div&gt;</code></p>

<h3 id="ng-repeat">ng-repeat</h3>

<p>Use to iterate over an array e.g. <code class="highlighter-rouge">&lt;div ng-repeat="product in store.products"&gt; ... &lt;/div&gt;</code></p>

<h3 id="ng-src">ng-src</h3>

<p>Images cannot be used via the <code class="highlighter-rouge">&lt;img src="expression"&gt;</code> method, since the browser will try to load the image before the expression is evaluated. Instead use the <code class="highlighter-rouge">ng-src</code> directive. e.g. <code class="highlighter-rouge">&lt;img ng-src="" /&gt;</code></p>

<h3 id="ng-click">ng-click</h3>

<p>Is evaluated when an element is clicked on. This can be used to change the page when someone clicks on certain elements. This is an example of two-way data binding. e.g. <code class="highlighter-rouge">&lt;a ng-click="product.selectTab(1)"&gt;product 1&lt;/a&gt;</code></p>

<h3 id="ng-init">ng-init</h3>

<p>Lets you initialise variables to an initial value. e.g. <code class="highlighter-rouge">&lt;div ng-init="tab = 1"</code>&gt;
NOTE: great for prototyping, but is usually handled inside a controller.</p>

<h3 id="ng-class">ng-class</h3>

<p>Apply the specified css class tag to an element if the expression evaluates to true.
<code class="highlighter-rouge">&lt;li ng-class="{ active:tab === 1 }"&gt;</code></p>

<h3 id="ng-model">ng-model</h3>

<p>Binds the HTML element value to a property, so you can have two way binding e.g. type in one field and see the contents written to another field. Initialise any variables being used either with <code class="highlighter-rouge">ng-init</code> or better still using a property of a controller.</p>

<h3 id="ng-submit">ng-submit</h3>

<p>Call a function when a form is submitted. e.g. <code class="highlighter-rouge">ng-submit="reviewCtrl.addReview(product)"</code></p>

<h3 id="ng-include">ng-include</h3>

<p>Extract commonly included HTML snippets into separate files. e.g. <code class="highlighter-rouge">&lt;h3 ng-include="'product-title.html'"&gt;&lt;/h3&gt;</code> will insert the contents of the file <code class="highlighter-rouge">product-title.html</code> inside the <code class="highlighter-rouge">&lt;h3&gt;</code> tags. <code class="highlighter-rouge">ng-include</code> expects a variable, so to pass in a file name instead, be sure to use single quotes.</p>

<p>Since this file wonâ€™t be loaded until it is requested via ajax, it will be missing when the page initially loads. Instead of using <code class="highlighter-rouge">ng-include</code> a <em>custom directive</em> can be used instead.</p>

<h2 id="filters">Filters</h2>

<p>Often used in the form: ``</p>

<ul>
  <li>``</li>
  <li><code class="highlighter-rouge">MM\dd\yyyy @ h:mma</code></li>
  <li>``</li>
  <li>`` (use the -ve sign to indicate descending order)</li>
</ul>

<h2 id="forms">Forms</h2>

<ul>
  <li>Add <code class="highlighter-rouge">novalidate</code> to the <code class="highlighter-rouge">&lt;form&gt;</code> tag to turn off HTML validations.</li>
  <li>Add <code class="highlighter-rouge">required</code> attributes to any fields which are mandatory.</li>
  <li><code class="highlighter-rouge">nameOfForm.$valid</code> is a special property which indicates if the form is currently valid or not. AND this value with the method called to submit the form, to ensure this method is never called if the form is not valid.</li>
  <li><code class="highlighter-rouge">ng-pristine</code>, <code class="highlighter-rouge">ng-dirty</code>, <code class="highlighter-rouge">ng-invalid</code>, <code class="highlighter-rouge">ng-valid</code> are classes which are automatically applied to form fields and can be used to style them according to whether they are valid / invalid.</li>
  <li>Use the <code class="highlighter-rouge">type</code> attribute to indicate which type of field it is e.g. <code class="highlighter-rouge">type="email"</code>, <code class="highlighter-rouge">type="url"</code>, <code class="highlighter-rouge">type="number"</code></li>
</ul>

<h2 id="custom-directives">Custom Directives</h2>

<p>Template-expanding directives are the simplest - they define a custom tag or attribute which is expanded or replaced (can contain Controller logic if needed). e.g. <code class="highlighter-rouge">&lt;product-title&gt;&lt;/product-title&gt;</code>
Directives can also be used for:</p>
<ol>
  <li>Expressing complex UI</li>
  <li>Calling events and registering event handlers</li>
  <li>Reusing common components</li>
</ol>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app.directive('productTitle', function() {
    return {
        // A configuration object defining how your directive will work
        restrict: 'E',
        templateUrl: 'product-title.html'
    };
});
</code></pre></div></div>

<ul>
  <li>The HTML version <code class="highlighter-rouge">product-title</code> translates to the camelCase version <code class="highlighter-rouge">productTitle</code> in JavaScript</li>
  <li>Donâ€™t use self-closing tags with custom elements, some browsers donâ€™t like them</li>
  <li>Use Element directives for UI widgets and Attribute directives for mixin behaviours, like a tooltip.</li>
</ul>

<h3 id="using-controllers-inside-custom-directives">Using controllers inside custom directives</h3>

<p>Inside the <code class="highlighter-rouge">app.directive</code> function definition, use the <code class="highlighter-rouge">controller</code> attribute to specify the controller constructor functionality.  Then use the <code class="highlighter-rouge">controllerAs</code> attribute to specify the alias for the controller.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app.directive('productTitle', function() {
    return {
        // A configuration object defining how your directive will work
        restrict: 'E',
        templateUrl: 'product-title.html',
        controller: function() {

            },
        controllerAs: 'panels'
    };
});
</code></pre></div></div>

<h2 id="services">Services</h2>

<p>Angular comes with several built in services e.g. <code class="highlighter-rouge">$http</code> to fetch JSON data from a web service, <code class="highlighter-rouge">$log</code> to log messages to the script console, <code class="highlighter-rouge">$filter</code> an array using the filter service.
<code class="highlighter-rouge">$http</code> can either be used as a function itself, specifying all attributes internally OR use one of the shortcut methods e.g. <code class="highlighter-rouge">$http.get</code>. Both methods return a <code class="highlighter-rouge">Promise</code> object. which allows you to do callbacks on it e.g. <code class="highlighter-rouge">.success()</code> or <code class="highlighter-rouge">.error()</code></p>

<p>To use a service, use the service name as the first item in an array, and then pass this service in to the controllers constructor method. This is implicit Dependency Injection.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app.controller('SomeController', ['$http', function($http) {

}]);

app.controller('SomeController', ['$http', '$log', function($http, $log) {

}]);
</code></pre></div></div>

<p>When Angular loads it creates something called an <code class="highlighter-rouge">Injector</code>. When the built-in services load, they register with the Injector as being available libraries. Then when our application loads, it registers the controller with the Injector, telling it that when it gets executed, it is going to need the <code class="highlighter-rouge">$log</code> and <code class="highlighter-rouge">$http</code> services. When the page loads and the controller gets used, the Inject grabs the services the controller needs and passes them in as arguments.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app.controller('StoreController', ['$http', function($http) {
    this.products = ???;
    $http.get('/products.json').success(function(data) {
        ??? = data;
    });
}]);
</code></pre></div></div>

<p>In the code above, if we try to assign the data to this.products, it will fail, since <code class="highlighter-rouge">this</code> inside the service is <code class="highlighter-rouge">$http</code>. Instead, we need to capture the controller (<code class="highlighter-rouge">this</code>) in a variable and use this in the success callback method. Initialise products to an empty array, so that when the page loads there wonâ€™t be errors.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app.controller('StoreController', ['$http', function($http) {
    var store = this;
    store.products = [];
    $http.get('/products.json').success(function(data) {
        store.products = data;
    });
}]);
</code></pre></div></div>
:ET