I"ÿ<p>Reference: <a href="http://tryruby.org/">http://tryruby.org/</a></p>

<h2 id="interactive-prompt">Interactive prompt</h2>
<p>To open an interactive prompt on Mac OS X type: <code class="highlighter-rouge">irb</code></p>

<h2 id="some-simple-functions">Some simple functions</h2>
<p><code class="highlighter-rouge">"Jimmy".reverse</code> to reverse a string<br />
<code class="highlighter-rouge">"Jimmy".length</code> to get the length of a string<br />
<code class="highlighter-rouge">"Jimmy" * 5</code></p>

<h2 id="conversions">Conversions</h2>
<p><code class="highlighter-rouge">40.to_s.reverse</code>. You canâ€™t reverse a number, but you can if you convert to a string first. Reverse is not defined for numbers. It is defined for arrays.</p>

<ul>
  <li><code class="highlighter-rouge">to_s</code> converts to strings</li>
  <li><code class="highlighter-rouge">to_i</code> converts to integers</li>
  <li><code class="highlighter-rouge">to_a</code> converts to arrays (or lists)</li>
</ul>

<h2 id="lists">Lists</h2>
<p><code class="highlighter-rouge">[]</code> defines an empty list
<code class="highlighter-rouge">[12,47,35]Â­.max</code> to get the maximum number in a list of integers<br />
<code class="highlighter-rouge">[12,47,35].sort</code> to sort them<br />
<code class="highlighter-rouge">ticket = [12,47,35]</code> will assign the list to a variable called <code class="highlighter-rouge">ticket</code><br />
<code class="highlighter-rouge">ticket.sort</code> will output the list sorted, but the value of <code class="highlighter-rouge">ticket</code> remains unchanged<br />
<code class="highlighter-rouge">ticket.sort!</code> will sort the list and reassign it to <code class="highlighter-rouge">ticket</code></p>

<h2 id="strings">Strings</h2>
<p><code class="highlighter-rouge">poem["am"] = "was"</code> will replace the first instance of <code class="highlighter-rouge">am</code> with <code class="highlighter-rouge">was</code> in the string variable <code class="highlighter-rouge">poem</code>
<code class="highlighter-rouge">poem.lines.to_a.reverse.join</code> will break a multi-line string into lines, add them to an array, reverse the array, then join the elements of the array back together to once again make a string. <code class="highlighter-rouge">to_s</code> instead of <code class="highlighter-rouge">join</code> would also have worked.</p>

<p>Methods can sometimes use <code class="highlighter-rouge">!</code> exclamation marks, and sometimes <code class="highlighter-rouge">?</code> question marks.</p>

<h2 id="hashes">Hashes</h2>
<p>Hashes or dictionaries are created using {} e.g. <code class="highlighter-rouge">books = {}</code>.<br />
This is actually short for <code class="highlighter-rouge">Hash.new</code>.<br />
<code class="highlighter-rouge">books.keys</code> will return a list of all the keys in the hash.</p>

<h2 id="symbols">Symbols</h2>
<p>Instead of using the same words over and over, create a symbol using <code class="highlighter-rouge">:</code> e.g. <code class="highlighter-rouge">:success</code>.</p>

<h2 id="blocks">Blocks</h2>
<p>Blocks can be defined starting with an <code class="highlighter-rouge">{</code> and ending with <code class="highlighter-rouge">}</code>. <br />
e.g. <code class="highlighter-rouge">books.values.each { |rate| ratings[rate] += 1 }</code>.</p>

<p>Blocks can alternatively be started with <code class="highlighter-rouge">do</code> and finished with <code class="highlighter-rouge">end</code>.</p>

<h2 id="files-and-directories">Files and directories</h2>
<p><code class="highlighter-rouge">Dir.entries "/"</code> gives an array of strings containing the names of all the directories or files in the root directory.<br />
<code class="highlighter-rouge">Dir["/*.txt"]</code> will just list the text files in the root directory. This uses the <code class="highlighter-rouge">[]</code> method, similar to entries, but which searches for files using wildcard characters.<br />
<code class="highlighter-rouge">File.read(Â­"/comics.tÂ­xt")</code> will read the contents of the file.<br />
Use <code class="highlighter-rouge">FileUtils.Â­cp('/comicÂ­s.txt', '/HomÂ­e/comics.tÂ­xt')</code> to copy files.<br />
Open a file in append mode using add some lines:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>File.open(Â­"/Home/comÂ­ics.txt", "a") do |f|
f &lt;&lt; "cat and girl"Â­  
end  
</code></pre></div></div>

<h2 id="date-and-time">Date and time</h2>
<p><code class="highlighter-rouge">File.mtime("/Home/comics.txt")</code> to find the last modified time of a file.<br />
<code class="highlighter-rouge">Time.now.hour</code> to give just the hour.<br />
<code class="highlighter-rouge">Time.now - 2.weeks</code> will give you the date 2 weeks ago.</p>

<h2 id="methods">Methods</h2>
<p>Start with <code class="highlighter-rouge">def</code>, finish with <code class="highlighter-rouge">end</code>, indent if you like.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def load_comics( path )
  comics = {}
  File.foreach(path) do |line|
    name, url = line.split(': ')
    comics[name] = url.strip
  end
  comics
end
</code></pre></div></div>

<p><code class="highlighter-rouge">File.foreach</code> is a method which opens a file and hands each line to the block.<br />
<code class="highlighter-rouge">require 'popuÂ­p'</code> if you need to import a library called <code class="highlighter-rouge">popup</code>. It will be loaded into the Libraries folder.</p>

<h2 id="classes">Classes</h2>
<p>Simple class definition:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class BlogEÂ­ntry
  attr_accesÂ­sor :titlÂ­e, :timeÂ­, :fullÂ­text, :moodÂ­
end
</code></pre></div></div>

<p>Add a constructor:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class BlogEntry
  def initialize( title, mood, fulltext )
    @time = Time.now
    @title, @mood, @fulltext = title, mood, fulltext
  end
end
</code></pre></div></div>

<p>Accessors can be used outside the object using normal dot notation e.g. <code class="highlighter-rouge">entry.title</code>.<br />
When inside the object prepend the <code class="highlighter-rouge">@</code> symbol. e.g. <code class="highlighter-rouge">@title</code>.</p>

<h2 id="more-on-lists">More on lists</h2>
<p><code class="highlighter-rouge">sort_by</code> can be used on a list of objects to sort them:<br />
e.g. <code class="highlighter-rouge">blog.sort_Â­by { |entrÂ­y| entryÂ­.time }</code><br />
e.g. <code class="highlighter-rouge">blog.sort_Â­by { |entrÂ­y| entryÂ­.time }.reverse</code><br />
<code class="highlighter-rouge">map</code> can be used to replace certain elements in a list
e.g. <code class="highlighter-rouge">blog.map {"Bruce Willis"}</code> will replace each BlogEntry object in the list with a string</p>

:ET