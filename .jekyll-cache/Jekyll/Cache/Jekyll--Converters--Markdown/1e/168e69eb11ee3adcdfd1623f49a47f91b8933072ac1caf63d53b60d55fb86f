I"d¢<h1 id="getting-started-with-angular">Getting Started with Angular</h1>

<h2 id="prerequisites">Prerequisites</h2>

<ul>
  <li>JavaScript course: JavaScript fundamentals ES6 (Scott Allen)</li>
  <li>https://jcoop.io/angular-practice-exercises/ - practice exercises using Plunker</li>
</ul>

<h2 id="typescript">TypeScript</h2>

<ul>
  <li>Strong typing e.g. <code class="highlighter-rouge">age: number</code></li>
  <li>Interfaces to nail down types e.g. <code class="highlighter-rouge">interface ICat { name: string age: number}</code></li>
  <li>Optional types in an interface can be specified using <code class="highlighter-rouge">?</code> e.g. <code class="highlighter-rouge">interface ICat { name: string age?: number}</code></li>
  <li>Class members (properties and functions) are public by default</li>
  <li>Constructors e.g. <code class="highlighter-rouge">constructor (private name, private color) { }</code> creates private member variables and binds them to the values passed in. Alternatively <code class="highlighter-rouge">constructor (public name, public color) { }</code> creates public member variables and binds them</li>
</ul>

<h2 id="angularjs-vs-angular">AngularJS vs Angular</h2>
<ul>
  <li>AngularJS
    <ul>
      <li>MVC based - view and controller, view would refer to a controller</li>
      <li>controller would expose models or objects representing the data</li>
      <li>view was in control, it identified one or more controllers which controlled sections of the page</li>
      <li>directives encapsulated display and functionality in a cohesive unit</li>
    </ul>
  </li>
  <li>Angular
    <ul>
      <li>component based - component and associated template - 1 to 1 - seperate models</li>
      <li>more similar to the directives that were in AngularJS</li>
    </ul>
  </li>
</ul>

<h2 id="angular-conceptual-overview">Angular Conceptual Overview</h2>

<ul>
  <li>Root App component is always loaded first</li>
  <li>Router then checks the URL for any component which matches and loads this, as well as corresponding children (and their children etc)</li>
  <li>When browsing to a new route - the Root App component remains, but the router loads a new component, children etc</li>
  <li>As a user browses and applications grow, this can be a lot to load into memory, <strong>hence</strong> Angular modules</li>
</ul>

<h3 id="modules">Modules</h3>

<ul>
  <li>Angular modules (not ES2015 modules) contain a number of routes and their component trees, which can be loaded independently</li>
  <li>Components, services, directives and pipes are registered within a module
    <ul>
      <li>then available for use by everything else in that module</li>
      <li>everything except for services are only available in that module</li>
      <li>must also be registered in another module if to be loaded in that module also</li>
      <li>services, otoh, are registered in the root injector so available across modules</li>
    </ul>
  </li>
</ul>

<h2 id="angular-cli">Angular CLI</h2>

<ul>
  <li><code class="highlighter-rouge">ng new ng-fundamentals</code></li>
  <li><code class="highlighter-rouge">package.json</code>, <code class="highlighter-rouge">angular.json</code> - used by the CLI for various things including webpack builds</li>
</ul>

<h2 id="bootstrapping">Bootstrapping</h2>

<ul>
  <li><code class="highlighter-rouge">src/main.ts</code> is referenced in the <code class="highlighter-rouge">angular.json</code> config under the <code class="highlighter-rouge">main</code> attribute. This is used by the webpack config for the site</li>
</ul>

<h2 id="static-files">Static files</h2>

<p>In templates, static image files in the usual <code class="highlighter-rouge">src/assets</code> directory can be referenced using an absolute path starting <code class="highlighter-rouge">/assets</code> e.g. <code class="highlighter-rouge">/assets/images/a.png</code>. This only works due to the <code class="highlighter-rouge">"assets"</code> array in the <code class="highlighter-rouge">angular.json</code> file containing the folder <code class="highlighter-rouge">src/assets</code>. Webpack then includes this directory in the app bundle (with the paths of the assets being relative to the <code class="highlighter-rouge">angular.json</code> file).</p>

<p>Static CSS and JS files have a different convention. Separate <code class="highlighter-rouge">styles</code> and <code class="highlighter-rouge">scripts</code> attributes hold arrays with paths to these files. Add any others required, e.g. bootstrap, jquery to these arrays.</p>

<h1 id="communicating-between-angular-components">Communicating between Angular Components</h1>
<h2 id="input-properties">Input Properties</h2>
<h2 id="output-properties">Output Properties</h2>

<h2 id="template-variables">Template Variables</h2>

<ul>
  <li>In the HTML which embeds the child component via the selector, assign a local reference or template variable e.g. <code class="highlighter-rouge">&lt;event-summary #summary&gt;&lt;/event-summary&gt;</code></li>
  <li>This reference can then be used anywhere on the parent component to called public methods on the embedded child component e.g. <code class="highlighter-rouge">&lt;button (click)="summary.logFoo()"&gt;Log&lt;/button&gt;</code></li>
  <li>Template variables can also be used to bind to a public property on a child component e.g. on the parent component use: ``</li>
</ul>

<h2 id="styling">Styling</h2>

<ul>
  <li>http://getbem.com/introduction/</li>
  <li>http://smacss.com/</li>
</ul>

<h1 id="exploring-the-angular-template-syntax">Exploring the Angular Template Syntax</h1>

<h2 id="interpolation-property-bindings-and-expressions">Interpolation, Property Bindings and Expressions</h2>

<p>Both interpolation and property binding are used to bind data from the component to the template.</p>
<ul>
  <li>Interpolation - simply display the data e.g. <code class="highlighter-rouge">&lt;h2&gt;&lt;/h2&gt;</code></li>
  <li>Property binding - bind the data to a property of a DOM element e.g. <code class="highlighter-rouge">&lt;img [src]="user.imageUrl"</code></li>
</ul>

<h3 id="expression-restrictions">Expression Restrictions</h3>
<p>Both of these use expressions (<code class="highlighter-rouge">user.name</code>; <code class="highlighter-rouge">user.imageUrl</code>) to define the value. There is some flexibility and also some restrictions in this.</p>
<ul>
  <li>Can use a calculation e.g. <code class="highlighter-rouge">2+2</code></li>
  <li>Can use a function e.g. <code class="highlighter-rouge">gotIt()</code></li>
  <li>Expressions can‚Äôt use assignment operators e.g. <code class="highlighter-rouge">=</code>, <code class="highlighter-rouge">+=</code> etc</li>
  <li>Expressions can‚Äôt use <code class="highlighter-rouge">new</code></li>
  <li>Can‚Äôt use expression chaining with <code class="highlighter-rouge">;</code></li>
  <li>Can‚Äôt access anything on the global namespace e.g. <code class="highlighter-rouge">console</code>, <code class="highlighter-rouge">window</code></li>
</ul>

<h3 id="expression-recommendations">Expression Recommendations</h3>
<ul>
  <li>Have no side effects - disturbs the uni-directional data flow</li>
  <li>Fast, simple, idempotent</li>
</ul>

<h2 id="event-bindings-and-statements">Event Bindings and Statements</h2>
<ul>
  <li>Can use <code class="highlighter-rouge">=</code>, but no others e.g. <code class="highlighter-rouge">+=</code></li>
  <li>Can chain</li>
  <li>No <code class="highlighter-rouge">new</code></li>
  <li>Nothing from the global namespace</li>
  <li>They often have side effects (and therefore aren‚Äôt idempotent), often make ajax calls (so not fast), but they should still be simple</li>
</ul>

<h2 id="hiding-content">Hiding Content</h2>

<ul>
  <li><code class="highlighter-rouge">*ngIf</code> completely removes elements from the DOM</li>
  <li>Alternatively to show and hide elements temporarily, bind to the ‚Äúhidden‚Äù DOM property (must ensure to use the ‚Äúsafe-navigation operator‚Äù in this instance)</li>
  <li>Choosing the best option aids performance</li>
</ul>

<h2 id="styling-content">Styling Content</h2>

<p>There are two main ways to add styles to HTML elements conditionally:</p>

<ul>
  <li>Class bindings is good for adding single classes e.g. <code class="highlighter-rouge">&lt;div [class.green]="event.startTime === '8am'"&gt;</code> will add the css <code class="highlighter-rouge">class="green"</code> to this element if the condition is true</li>
  <li><code class="highlighter-rouge">ngClass</code> is more useful for adding multiple classes. It takes an object where the keys are the names of the classes and the values are the conditional expressions e.g. <code class="highlighter-rouge">&lt;div [ngClass]="{green: event.startTime === '8am', bold: event.startTime === '8am'}"&gt;</code>
    <ul>
      <li>Replace logic in templates with calls to functions in the component</li>
      <li>Instead of returning an object can also return a string with class names e.g. <code class="highlighter-rouge">'green bold'</code> OR an array with class names e.g. <code class="highlighter-rouge">['green', 'bold']</code></li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">ngStyle</code> can be also used to apply single styles</li>
</ul>

<h1 id="creating-reusable-angular-services">Creating Reusable Angular Services</h1>

<ul>
  <li>Use the<code class="highlighter-rouge">@Injectable</code> decorator for services (only strictly need IF a service has its own dependencies which need to be injected - e.g. an HTTP service)</li>
  <li>Register the service with the AppModule as a provider</li>
  <li>Call the service in <code class="highlighter-rouge">ngOnInit</code> - to get typescript compilation, mark this class as implementing <code class="highlighter-rouge">ngOnInit</code></li>
</ul>

<h2 id="wrapping-third-party-services">Wrapping third party services</h2>

<ul>
  <li><code class="highlighter-rouge">npm install toastr --save</code></li>
  <li>Add any CSS or JS files to the <code class="highlighter-rouge">angular.json</code></li>
  <li>Create a service to wrap the third party service <code class="highlighter-rouge">ng g s shared/toastr</code></li>
  <li>Add a reference in this Typescript service file to the variable on the global scope: <code class="highlighter-rouge">declare let toastr</code>(so Typescript doesn‚Äôt complain)</li>
  <li>Implement methods in the service to wrap the third party service</li>
  <li>Inject the service as required into components, and call the methods</li>
</ul>

<p>##Holding State</p>

<ul>
  <li>Covered in a later module - services can also be used to hold state for an application.</li>
</ul>

<h1 id="routing-and-navigation-pages">Routing and Navigation Pages</h1>

<ul>
  <li>Useful to define routes in a separate file <code class="highlighter-rouge">routes.ts</code></li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">appRoutes</span><span class="p">:</span> <span class="nx">Routes</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span> <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">events</span><span class="dl">'</span><span class="p">,</span> <span class="na">component</span><span class="p">:</span> <span class="nx">EventsListComponent</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">events/:id</span><span class="dl">'</span><span class="p">,</span> <span class="na">component</span><span class="p">:</span> <span class="nx">EventDetailsComponent</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">path</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span> <span class="na">redirectTo</span><span class="p">:</span> <span class="dl">'</span><span class="s1">events</span><span class="dl">'</span><span class="p">,</span> <span class="na">pathMatch</span><span class="p">:</span> <span class="dl">'</span><span class="s1">full</span><span class="dl">'</span> <span class="p">}</span>
<span class="p">]</span>
</code></pre></div></div>

<ul>
  <li>Reference this in the <code class="highlighter-rouge">AppModule</code>, where the <code class="highlighter-rouge">RoutesModule</code> is imported</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">imports</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">BrowserModule</span><span class="p">,</span>
    <span class="nx">RouterModule</span><span class="p">.</span><span class="nx">forRoot</span><span class="p">(</span><span class="nx">appRoutes</span><span class="p">)</span>
  <span class="p">],</span>
</code></pre></div></div>

<ul>
  <li>Ensure the base href tag in index.html exists and is correct when using routing: ` <base href="/" />`</li>
</ul>

<h2 id="guarding-against-route-activation">Guarding against Route Activation</h2>

<p>If a user manually enters a URL containing a non existent ID for a details page, a route guard can ensure the details page is not displayed.</p>

<h2 id="guarding-against-route-deactivation">Guarding against Route Deactivation</h2>

<p>Conversely, if a user tries to navigate away from a page, a route guard can ensure they are warned before continuing e.g. if they have unsaved data.</p>

<ul>
  <li>Can specify a service OR a function when defining <code class="highlighter-rouge">canActivate</code> and <code class="highlighter-rouge">canDeactivate</code> in routes config</li>
  <li>When specifying a function, use a string in the route to give a name of the ‚Äúevent‚Äù and then in the AppModule providers, map the event to the function e.g. <code class="highlighter-rouge">{ provide: 'CanDeactivateCreateEvent', useValue: checkDirtyState }</code></li>
  <li>Function can simply be provided inline in the <code class="highlighter-rouge">AppModule</code> for the time being e.g. <code class="highlighter-rouge">export function checkDirtyState()</code>.</li>
  <li>In order to access the component, by default this is passed as the first argument to the function which is specified to be called by the <code class="highlighter-rouge">canDeactivate</code> function.</li>
</ul>

<h2 id="preloading-data-for-components">Preloading Data for Components</h2>

<p>When the page loads and the data pops in afterwards, this can look awkward. Resolve route handlers can help by waiting for the data to load before displaying the component.</p>

<ul>
  <li>Add a service, a resolver, which implements <code class="highlighter-rouge">Resolve</code>from <code class="highlighter-rouge">@angular/router</code></li>
  <li>Implement the <code class="highlighter-rouge">resolve()</code> function, ensuring it returns an observable to Angular so that it can see when it finishes e.g. <code class="highlighter-rouge">this.eventService.getEvents().pipe(map(e =&gt; e));</code></li>
  <li>Adjust the route definition to include an implementation for <code class="highlighter-rouge">resolve</code> e.g. <code class="highlighter-rouge">resolve: { events: EventListResolverService }</code>i.e. before resolving this route call the <code class="highlighter-rouge">EventListResolverService</code> and when that service finishes and returns some data, add the data to the route as a property named <code class="highlighter-rouge">events</code> and continue</li>
  <li>Angular will delay loading the component until the data has been fetched and will add the data to the route. Retrieve in the component from the activated route snapshot e.g. <code class="highlighter-rouge">this.events = this.activatedRoute.snapshot.data['events'];</code></li>
</ul>

<h2 id="styling-active-links">Styling Active Links</h2>

<ul>
  <li>Use <code class="highlighter-rouge">routerLinkActive="active"</code> to add the class <code class="highlighter-rouge">active</code> to <code class="highlighter-rouge">[routerLink]</code>a hrefs which match. Uses startsWith match, so either need to be careful how routes are defined OR apply the binding <code class="highlighter-rouge">[routerLinkActiveOptions]="{exact: true}"</code> to change the matching for a particular <code class="highlighter-rouge">routerLink</code>.</li>
</ul>

<h2 id="lazy-loading-feature-modules">Lazy Loading Feature Modules</h2>

<ul>
  <li>
    <p>Import <code class="highlighter-rouge">CommonModule</code> rather than <code class="highlighter-rouge">BrowserModule</code></p>
  </li>
  <li>
    <p>When importing <code class="highlighter-rouge">RouterModule</code> call <code class="highlighter-rouge">forChild</code> instead of <code class="highlighter-rouge">forRoot</code>when defining routes. Ensure the route is defined relatively</p>
  </li>
  <li>
    <p>Define when features modules should be lazy loaded in the main modules router config using <code class="highlighter-rouge">loadChilder</code>:</p>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// when the path starts with 'user', load the UserModule from this path</span>
<span class="p">{</span> <span class="nl">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">profile</span><span class="dl">'</span><span class="p">,</span> <span class="nx">loadChildren</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./user/user.module#UserModule</span><span class="dl">'</span> <span class="p">}</span>  
</code></pre></div></div>

<h2 id="organising-exports-with-barrels">Organising Exports with Barrels</h2>

<ul>
  <li>Can add an <code class="highlighter-rouge">index.ts</code> inside sub folders and from there export components e.g. <code class="highlighter-rouge">export * from './event.service'</code></li>
  <li>Components can then be imported in a less verbose way e.g.</li>
</ul>

<h1 id="collecting-data-with-angular-forms-and-validation">Collecting Data with Angular Forms and Validation</h1>

<h2 id="forms">Forms</h2>

<p>There are 2 choices for forms:</p>

<ol>
  <li>Template based forms are good for simple use cases, but all the logic is in the form, cross field validation is more difficult, can‚Äôt unit test logic</li>
  <li>Model based / reactive forms all logic in the component instead</li>
</ol>

<h2 id="template-based-forms">Template based forms</h2>

<ul>
  <li>Wire up the login form to the component using <code class="highlighter-rouge">(ngmodel)</code> event bindings. Additionally set a <code class="highlighter-rouge">name</code>attribute on the <code class="highlighter-rouge">&lt;input&gt;</code> fields - typical to set to the same value, but not always the case. These <code class="highlighter-rouge">ngModel</code> bindings will simply bind to the form.</li>
  <li>Get access to the form by adding a local reference to the <code class="highlighter-rouge">&lt;form&gt;</code>: <code class="highlighter-rouge">\#loginForm="ngForm"</code>. Use this in the form submit handler</li>
  <li>Using <code class="highlighter-rouge">(ngSubmit)</code> on the <code class="highlighter-rouge">&lt;form&gt;</code> is better than wiring up <code class="highlighter-rouge">(submit)</code> since it takes care of e.g. not submitting the form to the server: <code class="highlighter-rouge">(ngSubmit)="login(loginForm.value)"</code> (only want the <code class="highlighter-rouge">value</code> of the form, not the whole form object)</li>
  <li><code class="highlighter-rouge">loginForm.value</code>contains a dictionary of form values. Note, still need to have variables in the component to hold these values</li>
  <li>Use <code class="highlighter-rouge">ngModelGroup</code> to next a group of fields e.g. the <code class="highlighter-rouge">location</code> part of an <code class="highlighter-rouge">event</code> e.g. <code class="highlighter-rouge">&lt;div ngModelGroup="location"&gt;</code></li>
  <li>Add a preview for an image by adding an <code class="highlighter-rouge">&lt;img&gt;</code> tag and setting the value to the value of the image field</li>
</ul>

<h3 id="validating-template-based-forms">Validating Template based forms</h3>

<p>The form and its controls have various states accessible via the local loginForm reference variable e.g. <code class="highlighter-rouge">loginForm.valid</code>, <code class="highlighter-rouge">loginForm.controls.username.valid</code>.</p>

<ul>
  <li>Use the states to e.g. disable the submit button: <code class="highlighter-rouge">[disabled]="loginForm.invalid"</code></li>
  <li>Disable HTML5 validation by adding the <code class="highlighter-rouge">novalidate</code> boolean attribute to the <code class="highlighter-rouge">&lt;form&gt;</code> tag</li>
  <li>Add attributes to form elements for validation e.g. <code class="highlighter-rouge">required</code>; <code class="highlighter-rouge">pattern="[A-Za-z]*"</code></li>
  <li>Ensure validation messages are shown when form controls are dirty, but input is still not valid e.g. <code class="highlighter-rouge">&lt;em *ngIf="loginForm.controls.password?.invalid &amp;&amp; loginForm.controls.password?.dirty"&gt;Required&lt;/em&gt;</code></li>
</ul>

<h2 id="model-driven--reactive-forms">Model driven / Reactive forms</h2>

<ul>
  <li>Create a <code class="highlighter-rouge">FormGroup</code> and <code class="highlighter-rouge">FormControl</code>s on the component</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">profileForm</span><span class="p">:</span> <span class="nx">FormGroup</span><span class="p">;</span>    
<span class="nx">ngInit</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">profileForm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FormGroup</span><span class="p">({</span>
  	<span class="na">firstName</span><span class="p">:</span> <span class="k">new</span> <span class="nx">FormControl</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">authService</span><span class="p">.</span><span class="nx">currentUser</span><span class="p">.</span><span class="nx">firstName</span><span class="p">),</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="k">new</span> <span class="nx">FormControl</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">authService</span><span class="p">.</span><span class="nx">currentUser</span><span class="p">.</span><span class="nx">lastName</span><span class="p">)</span>
   <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Wire up in the HTML</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">form</span> <span class="p">[</span><span class="nx">formGroup</span><span class="p">]</span><span class="o">=</span><span class="dl">"</span><span class="s2">profileForm</span><span class="dl">"</span> <span class="nx">autocomplete</span><span class="o">=</span><span class="dl">"</span><span class="s2">off</span><span class="dl">"</span> <span class="nx">novalidate</span><span class="o">&gt;</span>
<span class="p">...</span>
	<span class="o">&lt;</span><span class="nx">input</span> <span class="nx">formControlName</span><span class="o">=</span><span class="dl">"</span><span class="s2">firstName</span><span class="dl">"</span> <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">firstName</span><span class="dl">"</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="p">...</span>
</code></pre></div></div>

<ul>
  <li>Implement submission of the form using <code class="highlighter-rouge">ngSubmit</code> e.g. <code class="highlighter-rouge">(ngSubmit)="save(profileForm.value)"</code></li>
</ul>

<h3 id="validating-model-driven-forms">Validating model driven forms</h3>

<p>The main benefit is that the validation can be placed in the component, thereby increasing the testability.</p>

<ul>
  <li>The second parameter of the <code class="highlighter-rouge">FormControl</code> constructor allows specifying validation rules e.g. <code class="highlighter-rouge">Validators.required</code>. Now the <code class="highlighter-rouge">valid</code> property on the <code class="highlighter-rouge">FormGroup</code> form is available and rolls up all validation errors from each control</li>
  <li>To write a unit test: instantiate the component, stub the auth service to return true or false for <code class="highlighter-rouge">valid</code>, call <code class="highlighter-rouge">saveProfile()</code> method on the component and check using a mock if the profile on the auth service is updated or not. Can also test the validity of the form by exercising the individual form controls and their individual states to ensure the logic is correct.</li>
  <li>Pass multiple validators using an array e.g. <code class="highlighter-rouge">[Validators.required, Validators.pattern('[a-zA-Z].*')]</code></li>
  <li>Check which validators is failing using e.g. <code class="highlighter-rouge">profileForm.controls.firstName.errors.pattern</code> or <code class="highlighter-rouge">profileForm.controls.firstName.errors.required</code></li>
  <li>Angular documentation details different kinds of validators, can create custom validators if required</li>
</ul>

<h2 id="custom-validators">Custom validators</h2>

<p>A validator is simply a function which either returns <code class="highlighter-rouge">null</code> if no validation issues found, or returns an object with the details of the errors.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// version 1 (hard coded 'foo')</span>
<span class="c1">// a function which takes in a form control and returns an object (of any shape)</span>
<span class="kr">private</span> <span class="nx">restrictedWords</span><span class="p">(</span><span class="nx">control</span><span class="p">:</span> <span class="nx">FormControl</span><span class="p">):</span> <span class="p">{[</span><span class="nx">key</span><span class="p">:</span> <span class="nx">string</span><span class="p">]</span> <span class="p">:</span> <span class="nx">any</span><span class="p">}</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">control</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">inclues</span><span class="p">(</span><span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">?</span> <span class="p">{</span><span class="dl">'</span><span class="s1">restrictedWords</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span><span class="p">}</span>
    <span class="p">:</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// version 2 (validator accepts an array of restricted words)</span>
<span class="c1">// the restrictedWords function returns a function which will be added to the Validators array</span>
<span class="kr">private</span> <span class="nx">restrictedWords</span><span class="p">(</span><span class="nx">words</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span><span class="nx">control</span><span class="p">:</span> <span class="nx">FormControl</span><span class="p">):</span> <span class="p">{[</span><span class="nx">key</span><span class="p">:</span> <span class="nx">string</span><span class="p">]:</span> <span class="nx">any</span><span class="p">}</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">words</span><span class="p">)</span> <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">invalidWords</span> <span class="o">=</span> <span class="nx">words</span>
      <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">w</span> <span class="o">=&gt;</span> <span class="nx">control</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">w</span><span class="p">)</span> <span class="p">?</span>  <span class="nx">w</span> <span class="p">:</span> <span class="kc">null</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">w</span> <span class="o">=&gt;</span> <span class="nx">w</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">);</span> <span class="c1">// filter out the nulls from the map</span>
    <span class="k">return</span> <span class="nx">invalidWords</span> <span class="o">&amp;&amp;</span> <span class="nx">invalidWords</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span>
      <span class="p">?</span> <span class="p">{</span><span class="dl">'</span><span class="s1">restrictedWords</span><span class="dl">'</span><span class="p">:</span> <span class="nx">invalidWords</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">'</span><span class="s1">, </span><span class="dl">'</span><span class="p">)}</span>
      <span class="p">:</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="reusing-components-with-content-projection">Reusing Components with Content Projection</h1>

<ul>
  <li>
    <p>Content projection: a component with some kind of visual wrapper (Container), but the content is decided by the developer (Content) e.g. using a wrapper like a dialog box with cancel and save buttons and positioning logic and reuse it with different types of content.</p>
  </li>
  <li>
    <p>Multiple slot content projection: multiple variable contents are wrapped in a single container and displayed e.g. side by side, down the page etc</p>
  </li>
  <li>
    <p>Indicate the place to project content using <code class="highlighter-rouge">&lt;ng-content&gt;</code> tag in the container component</p>
  </li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- session-list.component.html --&gt;</span>
<span class="nt">&lt;div</span><span class="err">¬†</span><span class="na">class=</span><span class="s">"row"</span><span class="err">¬†</span><span class="na">*ngFor=</span><span class="s">"let¬†session¬†of¬†sessions"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span><span class="err">¬†</span><span class="na">class=</span><span class="s">"col-md-10"</span><span class="nt">&gt;</span>
  ¬†¬†    <span class="nt">&lt;app-collapsible-well</span><span class="err">¬†</span><span class="na">[title]=</span><span class="s">"session.name"</span><span class="nt">&gt;</span>
  ¬†¬†¬†¬†      <span class="nt">&lt;h6&gt;&lt;/h6&gt;</span>
  ¬†¬†¬†¬†      <span class="nt">&lt;span&gt;</span>Duration:¬†<span class="nt">&lt;/span&gt;</span>
  ¬†¬†¬†¬†      <span class="nt">&lt;span&gt;</span>Level:¬†<span class="nt">&lt;/span&gt;</span>
            <span class="nt">&lt;p&gt;&lt;/p&gt;</span>
        <span class="nt">&lt;/app-collapsible-well&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
  
<span class="c">&lt;!-- collapsible-well.component.html --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">(click)=</span><span class="s">"toggleContent()"</span> <span class="na">class=</span><span class="s">"well pointable"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h4</span> <span class="na">class=</span><span class="s">"well-title"</span><span class="nt">&gt;&lt;/h4&gt;</span>
    <span class="nt">&lt;ng-content</span> <span class="na">*ngIf=</span><span class="s">"visible"</span><span class="nt">&gt;&lt;/ng-content&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <p>The collapsible well can be used with <strong>any</strong> component, not just within the session list component.</p>
  </li>
  <li>
    <p>To project multiple content areas and maintain more control over how e.g. the title is displayed as well as the body, additionally use an <code class="highlighter-rouge">ng-content</code> tag to display the title HTML. Use <code class="highlighter-rouge">select=""</code> on each ng-content tag to indicate which content will go where (the contents of which can be any selector e.g. id selector, class selector or attribute selector)</p>
  </li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- session-list.component.html --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span> <span class="na">*ngFor=</span><span class="s">"let session of sessions"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-md-10"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;app-collapsible-well&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">well-title</span><span class="nt">&gt;</span>
                
                <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">"glyphicon glyphicon-fire"</span> <span class="na">*ngIf=</span><span class="s">"session.voters.length &gt; 3"</span> <span class="na">style=</span><span class="s">"color: red;"</span><span class="nt">&gt;&lt;/i&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">well-body</span><span class="nt">&gt;</span>
                <span class="nt">&lt;h6&gt;&lt;/h6&gt;</span>
                <span class="nt">&lt;span&gt;</span>Duration: <span class="nt">&lt;/span&gt;</span>
                <span class="nt">&lt;span&gt;</span>Level: <span class="nt">&lt;/span&gt;</span>
                <span class="nt">&lt;p&gt;&lt;/p&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/app-collapsible-well&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="c">&lt;!-- collapsible-well.component.html --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">(click)=</span><span class="s">"toggleContent()"</span> <span class="na">class=</span><span class="s">"well pointable"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h4&gt;</span>
        <span class="nt">&lt;ng-content</span> <span class="na">select=</span><span class="s">"[well-title]"</span><span class="nt">&gt;&lt;/ng-content&gt;</span>
    <span class="nt">&lt;/h4&gt;</span>
    <span class="nt">&lt;ng-content</span> <span class="na">select=</span><span class="s">"[well-body]"</span> <span class="na">*ngIf=</span><span class="s">"visible"</span><span class="nt">&gt;&lt;/ng-content&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<h1 id="displaying-data-with-pipes">Displaying Data with Pipes</h1>

<p>Ng2‚Äôs pipes are similiar to ng1‚Äôs filters. However ng1‚Äôs filters were used for formatting, sorting and filtering data. In ng 2, pipes are only used for formatting due to performance reasons.</p>

<h2 id="built-in-pipes">Built in pipes</h2>

<ul>
  <li><code class="highlighter-rouge">{{ event.name | uppercase }}</code></li>
  <li><code class="highlighter-rouge">{{ event.date | date }}</code> gives Sep 26, 2019</li>
</ul>

<p>Add further functionality using parameters to the pipe added after a <code class="highlighter-rouge">:</code> e.g. the <code class="highlighter-rouge">date</code> pipe takes a string parameter</p>

<ul>
  <li><code class="highlighter-rouge">{{ event.date | date:'short' }}</code> gives 26/9/2019, 12:00 AM</li>
  <li><code class="highlighter-rouge">{{ event.date | date:'shortDate' }}</code> gives 26/9/2019</li>
  <li><code class="highlighter-rouge">{{ event.date | date:'y-M-d' }}</code> gives 2019-9-26</li>
</ul>

<h2 id="custom-pipes">Custom pipes</h2>

<p>Create a pipe and implement the <code class="highlighter-rouge">transform()</code> function according to the inputs, logic and outputs required</p>

<h2 id="filtering-and-sorting-data">Filtering and sorting data</h2>

<h3 id="mutability-identity-reference-type-and-primitive-value-type">Mutability, identity (reference type) and primitive (value type)</h3>

<p>An important concept is mutability. Objects and arrays in JavaScript are mutable - they can change anytime without changing their identity. If there is a pipe on an array to e.g. sort it, then every time there is a change to an array, Angular needs to know about it and check if anything has changed. This can be expensive. Therefore pipes in Ng2 only trigger a change when the identity of the source data has changed. Therefore only primitive types, strings, numbers etc can be used with pipes.</p>

<h3 id="impure-pipes">Impure pipes</h3>

<p>Impure pipes run on EVERY cycle of the change detection algorithm (the same as Ng1‚Äôs filters). This is NO LONGER RECOMMENDED. Instead, it is recommended to do it within the component which uses the data.</p>

<h3 id="example-of-filtering-data">Example of filtering data</h3>

<p>For example, displaying a subset of data depending on the selection of a number ‚Äòfilter‚Äô buttons.</p>

<ul>
  <li>One approach is to to pass the value of the button currently selected to the child component displaying all the data, as well as the full list of data.</li>
  <li>The child component stores the full list locally e.g. <code class="highlighter-rouge">@Input sessions: ISession[]</code> as well as the value of the filter e.g. <code class="highlighter-rouge">@Input filterBy: string</code></li>
  <li>The child implements <code class="highlighter-rouge">ngOnChanges</code> so that every time a different filter button is selected, the value of <code class="highlighter-rouge">filterBy</code> will change, <code class="highlighter-rouge">ngOnChanges</code> will fire and filtering logic in this method can be used to populate a list of <code class="highlighter-rouge">filteredSessions: ISession[]</code>, the array actually passed to the template</li>
</ul>

<h1 id="understanding-angulars-dependency-injection">Understanding Angular‚Äôs Dependency Injection</h1>

<ul>
  <li>Regular dependency injection</li>
  <li>Dealing with things which aren‚Äôt simple services using the <code class="highlighter-rouge">InjectionToken</code> and <code class="highlighter-rouge">@Inject()</code> decorator - allow registering with the DI system in various ways</li>
  <li>Altenative provider methods</li>
</ul>

<h2 id="using-third-party-global-services">Using Third Party Global services</h2>

<p>The <code class="highlighter-rouge">toastr</code> service was previously wrapped in an angular service and its 4 methods reimplemented, so that it could be injected easily, and the <code class="highlighter-rouge">toastr</code> object on the global <code class="highlighter-rouge">window</code> obscured from the rest of the code. However, providing implementations for all functionality of a third party library in this way is not practical.</p>

<h2 id="angular-dependency-injection-lookup">Angular Dependency Injection Lookup</h2>

<p>Angular uses the service <strong>types</strong> e.g. <code class="highlighter-rouge">AuthService</code> as the key to look up the instance of the service and inject it into components where required.</p>

<h2 id="injectiontoken">InjectionToken</h2>

<p>The <code class="highlighter-rouge">InjectionToken</code> creates a key for the dependency injection registry in order to provide the lookup to locate the instance of a service required.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import {InjectionToken} from '@angular/core'
declare let toastr: any
export let TOASTR_TOKEN = new InjectionToken
</code></pre></div></div>

<h1 id="creating-directives-and-advanced-components-in-angular">Creating Directives and Advanced Components in Angular</h1>

<p>45 mins - thur</p>

<h1 id="more-components-and-custom-validators">More Components and Custom Validators</h1>

<p>35 mins - thur</p>

<h1 id="communicating-with-the-server-using-http-observables-and-rx">Communicating with the Server Using HTTP, Observables, and Rx</h1>

<p>1 hour 7 mins - fri</p>

<h1 id="unit-testing-your-angular-code">Unit Testing Your Angular Code</h1>

<p>36 mins - sat</p>

<h1 id="testing-angular-components-with-integrated-tests">Testing Angular Components with Integrated Tests</h1>

<p>29 mins - sat</p>

<h1 id="taking-an-angular-app-to-production">Taking an Angular App to Production</h1>

<p>32 mins - sun</p>
:ET