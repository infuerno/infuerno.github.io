I"'<h2 id="introduction">Introduction</h2>

<h3 id="what-is-a-distributed-system">What is a distributed system?</h3>

<p>A distributed system is any application which involves two or more communicating processes. If any process becomes unavailable, then any dependent process operates in a state of reduced capability.</p>

<p>A good example of a distributed system is converting a console application with a call to library dll on the same computer to a call to a web service. The web service can be updated easily and also stats of the web service usage easily tracked.</p>

<h3 id="why">Why?</h3>

<ul>
  <li>One version of the truth (rather than having to synchronise e.g. stock levels in a warehousing system)</li>
  <li>Enforce uniform rules - business rules are implemented in one place rather than implemented several times in slightly different ways which hit problems</li>
  <li>Agility - new UI created which calls back to shared business layer</li>
</ul>

<h4 id="components">Components</h4>

<p>Security - authentication and authorisation need to be top of the list
Logging - must be implemented early on
Data - information between layers must only expose data required. Often need to expose different versions of the same objects
Business Logic - exposed via web service, queues etc
Connectivity - will have internal and external consumers - internal will likely use the same authentication system, external will likely have different authentication and be limited to HTTP</p>

<h4 id="security">Security</h4>

<p>Callers need to be authenticated to access the service and also the data provided by the service. Have a mechanism to translate the identities into a single principle you can trust. Given a trusted identity, authorisation rules can be applied.</p>

<p>Decide how group membership will be maintained. With AD? Temporal?</p>

<p>Authorisation will also be distributed and will depend on the components.</p>

<h4 id="logging">Logging</h4>

<ul>
  <li>Debugging distributed applications is hard</li>
  <li>Logs tell you what happened and when</li>
  <li>Numerous frameworks exist, log4net being a favourite example</li>
</ul>

<h4 id="data">Data</h4>

<ul>
  <li>Ownership of data typically belongs with the system which maintains the data</li>
  <li>Ideally local copies of data will not be kept, however you may need to maintain a copy if:
    <ul>
      <li>you need to join on it with local data</li>
      <li>the store of record cannot support the number of connections required, too far away or over a slow connection</li>
    </ul>
  </li>
  <li>If creating a copy, ensure you keep it updated in the following ways:
    <ul>
      <li>if data is stored in a file, only update when the file changes</li>
      <li>if data is stored in a database, only updated the changed records</li>
      <li>donâ€™t create bi-directional synchronisation, update the master and then receive the changes</li>
    </ul>
  </li>
</ul>

<p>#### Business logic</p>

<p>Sharing logic between assemblies requires all assemblies to be tested and deployed as a unit when any changes are made
With larger components a distributed app or service is more manageable</p>

<h4 id="connectivity">Connectivity</h4>

<p>On Microsoft platforms distributed systems expose components via COM+, .NET remoting, WCF.
Type of connectivity provided will limit consumers - provide mechanisms influenced by consumers</p>

<p>On service provider side:</p>
<ul>
  <li>ensure service can close down any bad connections</li>
  <li>add throttling to limit callers to a fixed number of calls per unit of time</li>
  <li>maybe make services discoverable</li>
</ul>

<p>On caller side:</p>
<ul>
  <li>check for all errors</li>
  <li>handle time outs</li>
  <li>if services are discoverable have a mechanism in place to use this</li>
</ul>

<h4 id="tools">Tools</h4>

<ul>
  <li>IIS - currently version 7.5, fully integrates ASP.NET into the processing pipeline - no need to write ISAPI extensions
    <ul>
      <li>more than just a host for UI, can also host workflows and webservices returning not just HTML, but also ADO.NET data sets, RSS and Atom feeds, ODATA, Json and Binary data</li>
      <li>by default applications get recycled every 29 hours but is configurable</li>
    </ul>
  </li>
  <li>WAS - Windows Process Activiation Service - introduced with Vista and Windows Server 2008 - provides a model to activate applications over MSMQ and TCP in the same way IIS has allowed activation of applications over HTTP for the last 10 years
    <ul>
      <li>IIS can host all kinds of application, WAS provides a mechanism to only activate those services when a request appears</li>
      <li>WAS provides a mechanimsm to listen for messages over protocols other than HTTP</li>
      <li>This works by first installing an adapter which handles activiation over a particular protocol - this adapter tells the WAS infrastructure it knows how to handle URLs with a particular scheme</li>
      <li>Next someone installs an application. Then using appcmd.exe WAS is configured such that the application can receive messages on a set of URLs - the config is stored in applicationHost.config inside WAS</li>
      <li>For WCF listeners the adapter is a service called net.msmq, net.pipe or net.tcp listener adapter</li>
      <li>For HTTP, HTTP.SYS listens for requests</li>
      <li>When a messages arrives the adapter receiving the request notifies WAS that a message has arrived</li>
      <li>WAS checks the request and checks how to activate the service required, firing up a worker process if necessary</li>
    </ul>
  </li>
  <li>MSMQ - distributed queuing system
    <ul>
      <li>supports one way messaging</li>
      <li>messages can be stored either in memory or on disk</li>
      <li>disk storage supports processing messages in the order in which they were received</li>
    </ul>
  </li>
  <li>MS-DTC - handle transactions spanning machines
    <ul>
      <li></li>
    </ul>
  </li>
  <li>WCF - set of class libraries providing uniform way of exposing messaging to .NET framework</li>
  <li>WF - set of class libraries for workflow</li>
  <li>SQL Server</li>
  <li>BizTalk</li>
</ul>

:ET