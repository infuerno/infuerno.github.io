I"r–<h2 id="shortcuts">Shortcuts</h2>
<ul>
  <li>Ctrl + . - to activate the contextual menu to e.g. add missing using statements</li>
  <li>F12 - go to implementation</li>
  <li>F9 - set a breakpoint</li>
  <li>Ctrl K, C - comment out code</li>
  <li>Ctrl K, D - format code</li>
  <li>Ctrl . - implement an interface</li>
</ul>

<h2 id="introduction-to-aspnet-mvc-4">Introduction to ASP.NET MVC 4</h2>

<ul>
  <li>The MVC 4 Visual Studio project templates use HTML5 by default.</li>
  <li><code class="highlighter-rouge">&lt;meta charset="utf-8"</code> is added (necessary to <a href="https://www.html5in24hours.com/meta-charset-protects-against-hackers/">avoid some XSS vulnerabilities</a>) - place as the first element within <code class="highlighter-rouge">&lt;head&gt;</code>.</li>
  <li><code class="highlighter-rouge">&lt;meta name="viewport"</code> tag is also added - important for mobile devices - tells the device that the site has been designed to work on a mobile device, so don‚Äôt assume it needs e.g. 900px</li>
  <li>modernizr.js ensures old browsers work fine with new HTML5 tags</li>
  <li>MVC Framework runs on the core ASP.NET runtime - been around for 10 years - stable, secure - HTTP modules / handlers / caching / diagnostics</li>
  <li><code class="highlighter-rouge">ViewBag</code> is a dynamically typed object in C# - add any property and it will be available to the view to pull out and display</li>
  <li><code class="highlighter-rouge">@</code> tells the razor view engine that here is a C# expression - evaluate it and write the results into the response at this point</li>
  <li><code class="highlighter-rouge">@model</code> directive (uses lowercase ‚Äòm‚Äô) to inform the view about the model e.g. <code class="highlighter-rouge">@model OdeToFood.Models.AboutModel</code></li>
  <li><code class="highlighter-rouge">@Model</code> (uppercase ‚ÄòM‚Äô) is then a strongly typed object available on the view</li>
</ul>

<h2 id="controllers-in-aspnet-mvc-4">Controllers in ASP.NET MVC 4</h2>

<h3 id="routes-and-controllers">Routes and Controllers</h3>
<p>The routing engine is a core part of ASP.NET - it isn‚Äôt tied to the MVC framework, you can use the routing engine to route requests for ASP.NET web forms, MVC services, any type of resource.</p>

<p>The routing engine is given a ‚Äúmap‚Äù to follow using the MapRoute API to specify: friendly name; pattern; default parameters. After the request passes through the routing engine, a <code class="highlighter-rouge">RouteData</code> data structure is populated with the details and available throughout the request not only to the MVC framework but also in controllers and views.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RouteData.Values["controller"]
RouteData.Values["action"]
RouteData.Values["id"]
</code></pre></div></div>

<p>The order in which routes are added to the global route collection is significant. The first route the URL matches, wins.</p>

<p>If there is a file on the file system matching the URL, then the MVC framework doesn‚Äôt interfere.
However some virtual .axd files which don‚Äôt really exist can be troublesome, so for this it explicity ignore in the <code class="highlighter-rouge">RegisterRoutes</code> method. i.e. <code class="highlighter-rouge">routes.IgnoreRoute("{resource}.axd/{*pathInfo)"</code></p>

<h3 id="action-and-parameters">Action and Parameters</h3>

<ul>
  <li><code class="highlighter-rouge">return Content("hello")</code> will literally return content rather than using any views</li>
  <li>Any public method added to a controller is potentially addressable (don‚Äôt add any public methods that you don‚Äôt expect to be called via a URL)</li>
  <li>If you add a parameter to an action, the MVC framework will do everything it can to populate it for you, looking all around the request at routing data (parsed from the URL), query string, POSTed form values.</li>
  <li><code class="highlighter-rouge">Server</code> is a property which is inherited on the controller to get to server type utilties including <code class="highlighter-rouge">Server.HtmlEncode</code> (razor view engine encodes automatically)</li>
</ul>

<h3 id="action-results">Action Results</h3>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Framework Behaviour</th>
      <th>Producing Method</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>ContentResult</td>
      <td>Returns a literal string</td>
      <td>Content</td>
    </tr>
    <tr>
      <td>EmptyResult</td>
      <td>No response</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td>FileContentResult / FilePathResult / FileStreamResult</td>
      <td>Returns the contents of a file</td>
      <td>File</td>
    </tr>
    <tr>
      <td>HttpUnauthorizedResult</td>
      <td>Returns an HTTP 403 status</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td>JavaScriptResult</td>
      <td>Returns a script to execute</td>
      <td>JavaScript</td>
    </tr>
    <tr>
      <td>JsonResult</td>
      <td>Returns data in a JSON format</td>
      <td>Json</td>
    </tr>
    <tr>
      <td>RedirectResult</td>
      <td>Redirects the client to a new URL</td>
      <td>Redirect</td>
    </tr>
    <tr>
      <td>RedirectToRouteResult</td>
      <td>Redirect to another action, or another controller‚Äôs action</td>
      <td>RedirectToRoute / RedirectToAction</td>
    </tr>
    <tr>
      <td>ViewResult / PartialViewResult</td>
      <td>Response is the responsibility of the view engine</td>
      <td>View / PartialView</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>All class names derive from <code class="highlighter-rouge">ActionResult</code></li>
</ul>

<h3 id="action-selectors">Action Selectors</h3>

<p><code class="highlighter-rouge">ActionName</code> selector attributes decorate public action methods and alter the name by which the action can be invoked. The below method is now invoked using <code class="highlighter-rouge">Modify</code> and can‚Äôt be invoked using <code class="highlighter-rouge">Edit</code>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[ActionName("Modify")]
[HttpPost]
public ActionResult Edit(string departmentName)
{
	// ...
}
</code></pre></div></div>

<p><code class="highlighter-rouge">AcceptVerbs</code> selector attributes specify the HTTP verb which is allowed to invoke an action e.g. <code class="highlighter-rouge">[HttpPost]</code></p>

<h3 id="action-filters">Action Filters</h3>

<p>Action filter attributes apply pre and post processing to an action, to add cross cutting logic - logic which needs to execute across multiple actions without duplicating code.</p>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>OutputCache</td>
      <td>Cache the output of a controller</td>
    </tr>
    <tr>
      <td>ValidateInput</td>
      <td>Turn off request validation and allow dangerous input</td>
    </tr>
    <tr>
      <td>Authorize</td>
      <td>Restrict an action to authorized users or roles</td>
    </tr>
    <tr>
      <td>ValidateAntiForgeryToken</td>
      <td>Helps prevent cross site request forgeries</td>
    </tr>
    <tr>
      <td>HandleError</td>
      <td>Can specify a view to render in the event of an unhandled exception</td>
    </tr>
  </tbody>
</table>

<p>Action filters can be applied at the method level, the class level OR the global level via FilterConfig.RegisterGlobalFilters e.g. the HandleError attribute. This uses the Error.cshtml view by default (when CustomErrors are on) - configured to use this by default.</p>

<p>Custom action filters can be created by creating a class which inherits from <code class="highlighter-rouge">ActionFilterAttribute</code>. There are 4 main methods availble to override:</p>
<ol>
  <li><code class="highlighter-rouge">OnActionExecuting</code> - look at the request before an action executes</li>
  <li><code class="highlighter-rouge">OnActionExecuted</code> - after the action method executes</li>
  <li><code class="highlighter-rouge">OnResultExecuting</code> - before the result is executed</li>
  <li><code class="highlighter-rouge">OnResultExecuted</code> - after a result is executed.</li>
</ol>

<p>These action filters are very powerful - change the environment, change results, change parameters. In each method, the filter context@ holds different information relevant to that particular scenario e.g. parameters</p>

<h2 id="razor-views">Razor Views</h2>

<ul>
  <li>There are 2 view engines registered by default in the MVC runtime: web forms engine and razor view engine</li>
  <li>Razor will automatically html encode any output sent through the <code class="highlighter-rouge">@</code> sign
    <ul>
      <li><code class="highlighter-rouge">@Html.Raw</code> will override this</li>
    </ul>
  </li>
</ul>

<h3 id="code-expressions">Code Expressions</h3>

<ul>
  <li><code class="highlighter-rouge">@item.Rating / 10</code> is an implicit expression - razor will evaluate the first part, but then print out <code class="highlighter-rouge">/ 10</code> lterally</li>
  <li><code class="highlighter-rouge">@(item.Rating / 10)</code> is an explicit expression - razor will evaluate the whole thing</li>
  <li><code class="highlighter-rouge">R@item.Rating</code> will not be interpreted correctly, but treated as literal text - need to explicity say <code class="highlighter-rouge">R@(item.Rating)</code>. On the other hand <code class="highlighter-rouge">@item.City, @item.Country</code> is interpreted as expected</li>
  <li>Email addresses will be output literally without issue, but twitter handles e.g. <code class="highlighter-rouge">@infurnex</code> will need to be escaped i.e. <code class="highlighter-rouge">@@infurnex</code></li>
  <li>The razor view is good at working out what is markup and what is C# code, but a literal string not within tags may be treated incorrectly as C# code e.g. ‚ÄúReview‚Äù. To ensure this is treated as literal text use <code class="highlighter-rouge">@:Review</code></li>
  <li>Use <code class="highlighter-rouge">@{ ... }</code> for code blocks. The expressions are only valuated and not written at all.</li>
</ul>

<h3 id="layout-views">Layout Views</h3>

<ul>
  <li>Two special methods: <code class="highlighter-rouge">@RenderBody()</code> and <code class="highlighter-rouge">@RenderSection()</code> - allows normal views to plug in their content to specific locations in the layout.</li>
  <li><code class="highlighter-rouge">_Layout.cshtml</code> - conventionally starts with an underscore to denote not a primary content view</li>
  <li><code class="highlighter-rouge">_ViewStart.cshtml</code> - sets which layout to use via a <code class="highlighter-rouge">Layout</code> property - convention with the razor view engine - if you have this file, it will be executed before the view is rendered. Can have multiple <code class="highlighter-rouge">_ViewStart.cshtml</code> files which work in a hierarchy e.g. one in the root of the Views folder, then one inside a subfolder for to be used for a subset of Views</li>
  <li>Set <code class="highlighter-rouge">Layout = null</code> in your <code class="highlighter-rouge">_ViewStart.cshtml</code> if you don‚Äôt want to use a layout view</li>
  <li><code class="highlighter-rouge">@RenderSection("featured", required: false)</code> can be included in a layout view and then specified within regular views using <code class="highlighter-rouge">@section featured{ .... }</code></li>
</ul>

<h3 id="html-helpers">HTML Helpers</h3>

<ul>
  <li>Makes it easy to create small blocks of HTML. There are helpers to create inputs, links, validation messages, labels and more.</li>
  <li>Mainly intelligent e.g. <code class="highlighter-rouge">@Html.EditorFor()</code> will emit an <code class="highlighter-rouge">&lt;input type="text"/&gt;</code> for strings and <code class="highlighter-rouge">&lt;input type="checkbox"/&gt;</code> for booleans</li>
  <li>All methods are available from the <code class="highlighter-rouge">Html</code> property that a view inherits</li>
  <li><code class="highlighter-rouge">Html.ActionLink("Edit", "Edit", new { id = item.ID }"</code> will render a link with text ‚ÄúEdit‚Äù pointing to the Edit action, and will pass an anoymous object along to the routing engine, which will construct the URL intelligently, working out where to put the id value into the URL e.g. <code class="highlighter-rouge">/Reviews/Edit/3</code></li>
  <li><code class="highlighter-rouge">Html.BeginForm()</code> will emit a form tag. With no additional params, the action will be the same URL we came from, with method POST.</li>
  <li><code class="highlighter-rouge">Html.HiddenFor(model =&gt; model.Id)</code> emits a hidden input field</li>
  <li><code class="highlighter-rouge">Html.LabelFor(model + model.Name)</code> emits a label field with a <code class="highlighter-rouge">for</code> attribute, useful for accessibility</li>
  <li>These methods will also populate the <code class="highlighter-rouge">id</code> and <code class="highlighter-rouge">name</code> attributes to match the property name of the model - necessary for the way the MVC framework tries to populate properties based on convention</li>
  <li><code class="highlighter-rouge">data-</code> attributes are also added, used for client side validation</li>
  <li>Model binding - happens when parameters are used in an action request as well as when using <code class="highlighter-rouge">TryUpdateModel(model)</code> method</li>
  <li>Other useful helpers: <code class="highlighter-rouge">CheckBoxFor</code>, <code class="highlighter-rouge">Display</code> helpers, <code class="highlighter-rouge">Name</code> helpers, <code class="highlighter-rouge">RouteLink</code> helpers, <code class="highlighter-rouge">ValidationMessageFor</code></li>
  <li>Custom helpers are useful - if lots of logic in the view, think about a custom helper</li>
</ul>

<h3 id="partial-views">Partial Views</h3>

<ul>
  <li>Partial views allow:
    <ul>
      <li>simplifing a view by splitting up the functionality among a view and one or more partial views</li>
      <li>reusing code across multiple views</li>
      <li>delegating work to another controller</li>
    </ul>
  </li>
  <li>Name usually starts with an <code class="highlighter-rouge">_</code> e.g. <code class="highlighter-rouge">_Review.cshtml</code></li>
  <li>Rendered using <code class="highlighter-rouge">Html.Partial("_Review", item)</code> where item is the model - this method can only be passed the current model, or part of the current model</li>
  <li>The location of the partial view file will determine which pages are allowed to use it</li>
  <li>Use <code class="highlighter-rouge">Html.Action</code> when rendering something not part of the current model e.g. render a partial outside of the normal context of that partial e.g. on the layout page to show the best review. This method issues a subrequest which calls another controller action independently e.g. <code class="highlighter-rouge">Html.Action("BestReview", "Reviews")</code> to call the <code class="highlighter-rouge">BestReview</code> action on the <code class="highlighter-rouge">Reviews</code> controller</li>
  <li><code class="highlighter-rouge">return PartialView("_Review", bestReview);</code> from this controller to render the partial view</li>
  <li>Add attribute <code class="highlighter-rouge">[ChildActionOnly]</code> so that this action cannot be called directly via a URL</li>
</ul>

<h2 id="working-with-data-part-1">Working with Data (Part 1)</h2>

<p>Schema first - existing database - graphical designer in VS, imports schema and generates classes needed to manipulate the schema - thereafter change the database and update the schema and the model
Model first - use the graphical designer to draw a model - EF generates both the classes and the database schema
Code first - write classes - EF uses these to generate the database schema using conventions (which can be overridden)</p>

<ul>
  <li>Need model classes - express relationships between them e.g. <code class="highlighter-rouge">Restaurant</code> model contains <code class="highlighter-rouge">ICollection&lt;RestaurantReview&gt; Reviews</code>, correspondingly <code class="highlighter-rouge">RestaurantReview</code> has an <code class="highlighter-rouge">int RestaurantId</code> property</li>
  <li>Need class to interact with the database derived from <code class="highlighter-rouge">DbContext</code>, this class has strongly typed <code class="highlighter-rouge">DbSet</code> properties e.g. <code class="highlighter-rouge">DbSet&lt;Restaurant&gt; Restaurants</code> and <code class="highlighter-rouge">DbSet&lt;RestaurantReview&gt; Reviews</code> (this latter could be retrieved via the Restaurant object, but this allows for more complex scenarios)</li>
  <li>Can now instantiate the db context derived class e.g. <code class="highlighter-rouge">var _db = new OdeToFoodDb();</code></li>
  <li>Since this is a disposable resource, should also override the Dispose method in a controller and call Dispose on the db context derived object. Cleaning up as soon as possible is good practice.</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>protected override void Dispose(bool disposing) {
    if (_db != null) _db.Dispose();
    base.Dispose(disposing);
}
</code></pre></div></div>

<ul>
  <li>Now in the action method, can get the resturants from the database e.g. <code class="highlighter-rouge">var model = _db.Restaurants.ToList();</code></li>
  <li>In the view, define the model as <code class="highlighter-rouge">@model IEnumerable&lt;OdeToFood.Models.Restaurant&gt;</code></li>
  <li>If EF can‚Äôt find an existing database it will just create one. If there are no specified connection strings anywhere, it will use the default instance of LocalDB and create the database with the fully qualified name of the DbContext.</li>
  <li>To explicity define the location of the database, pass the connection string into the constructor of the DbContext base class e.g. <code class="highlighter-rouge">public OdeToFoodDb() : base("server=.; initial catalog=odetofood; integrated security=true") { }</code></li>
  <li>Better still, reference the connection string by name from a config file: <code class="highlighter-rouge">public OdeToFoodDb() : base("name=OdeToFoodDbConnection") { }</code></li>
  <li>EF migrations can not only sync changes, but also populate with seed data</li>
  <li><code class="highlighter-rouge">Enable-Migrations -ContextTypeName OdeToFoodDb</code> - will create <code class="highlighter-rouge">Configuration.cs</code> and an initial migration file</li>
  <li>Within the new Configuration class, <code class="highlighter-rouge">AutomaticMigrationsEnabled</code> flag is set to false by default, but useful to set to true for initial development</li>
  <li>The Seed method can be used to add reference data, will be called after each migration to the latest version</li>
  <li>Use the AddOrUpdate() method to ensure duplicates aren‚Äôt added e.g. <code class="highlighter-rouge">context.Restaurants.AddOrUpdate(r =&gt; r.Name, new Resturant() { ...}, etc )</code></li>
  <li>Can configure the application to automatically apply updates</li>
  <li>Can explicity use <code class="highlighter-rouge">Update-Database -Verbose</code> via the package manager console</li>
  <li>To update the database with the model having made model changes:
    <ul>
      <li>Either create a migration script and run it (migration.cs file in the project)</li>
      <li>OR simply update the database (requires <code class="highlighter-rouge">AutomaticMigrationsEnabled</code> set to TRUE) (will not create an explicit migration.cs code file)</li>
    </ul>
  </li>
  <li>EF keeps track of which migration scripts have been applied, which haven‚Äôt and which order they need to be applied (in <code class="highlighter-rouge">_MigrationHistory</code>)</li>
</ul>

<h3 id="linq">LINQ</h3>

<p>Two different styles:</p>
<ul>
  <li>Comprehension Query Syntax: <code class="highlighter-rouge">var model = from r in _db.Restaurants where r.country == "USA" orderby r.Name select r;</code>
    <ul>
      <li>Starts with the <code class="highlighter-rouge">from</code> keyword</li>
      <li>Introduces a range variable, e.g. <code class="highlighter-rouge">r</code> which can be used throughout the rest of the query</li>
      <li>Keywords for filtering, grouping, joining and projecting e.g. <code class="highlighter-rouge">where</code>, <code class="highlighter-rouge">orderby</code>, <code class="highlighter-rouge">select</code></li>
    </ul>
  </li>
  <li>Extension Methods Syntax: <code class="highlighter-rouge">var model = _db.Restaurants.Where(r =&gt; r.Country == "USA").OrderBy(r =&gt; r.Name).Skip(10).Take(10);</code>
    <ul>
      <li>here you can also use <code class="highlighter-rouge">Skip()</code> and <code class="highlighter-rouge">Take()</code> methods here</li>
    </ul>
  </li>
</ul>

<p>There are numerous extension methods available</p>
<ul>
  <li>101 LINQ Samples on MSDN: http://code.msdn.microsoft.com/101-linq-samples-3fb9811b</li>
  <li>LinqPad: http://www.linqpad.net - comes with 100s of samples</li>
  <li>Pluralsight courses</li>
</ul>

<p>Use a projection to create a new anonymous type with the exact fields required e.g.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var model = from r in _db.Restaurants where r.country == "USA" orderby r.Name
    select new { r.Id, r.Name, r.City, r.Country, NumberOfReviews = r.Reviews.Count() };
</code></pre></div></div>
<p>Passing this to the view is difficult since it is an anonymous type. Instead create a view model object with these fields and create an instance of this type instead.</p>

<p>Alternative syntax using Extension Methods Syntax:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var model = _db.Restaurants.Where(r =&gt; r.Country == "USA").OrderBy(r =&gt; r.Name)
    .Select(r =&gt; new { r.Id, r.Name, r.City, r.Country, NumberOfReviews = r.Reviews.Count() });
</code></pre></div></div>

<p>To filter using a parameter which may be null use: <code class="highlighter-rouge">.Where(searchTerm == null || r.Country.StartsWith(searchTerm))</code></p>

<h2 id="working-with-data-part-2">Working with Data (Part 2)</h2>

<ul>
  <li>The <code class="highlighter-rouge">Find</code> method of a DbSet object allows you to search on the primary key</li>
</ul>

<h3 id="listing-reviews">Listing Reviews</h3>

<ul>
  <li><code class="highlighter-rouge">Html.ActionLink()</code> method has various overloads:
    <ul>
      <li><code class="highlighter-rouge">Html.ActionLink("LinkText", "ActionName", new { id=item.Id })</code></li>
      <li><code class="highlighter-rouge">Html.ActionLine("LinkText", "ActionName", "ControllerName", new { id=item.Id }, null)</code> to specify a different controller (if you forget the last parameter, the override with <code class="highlighter-rouge">htmlAttributes</code> for the last parameter, not <code class="highlighter-rouge">routeValues</code> will be chosen)</li>
      <li>the <code class="highlighter-rouge">htmlAttributes</code> parameter allows you to specify extra attributes e.g. <code class="highlighter-rouge">target="_blank"</code> i.e. <code class="highlighter-rouge">new { target="_blank" }</code></li>
    </ul>
  </li>
  <li>By default in a controller you would expect any <code class="highlighter-rouge">id</code> parameter to relate to the entity for this controller. <code class="highlighter-rouge">public ActionResult Index([Bind(Prefix="id")] int restaurantId)</code> will allow the parameter to be bound called <code class="highlighter-rouge">id</code> and keep this simple in views and routes, but also make it explicit that this is not the id of a review, but the id of a restaurant in the actual controller.</li>
  <li>EF doesn‚Äôt load up associated child collections automatically</li>
  <li>Adding the keyword <code class="highlighter-rouge">virtual</code> to the model definition of the child collection e.g. <code class="highlighter-rouge">public virtual ICollection&lt;RestaurantReview&gt; Reviews { get; set; }</code>. A wrapper will now be created to intercept calls to the Reviews property to ensure these are now loaded via a second call to the database. Two queries instead of one may be a worry - if so read this on eager loading: http://msdn.microsoft.com/en-US/data/jj574232</li>
</ul>

<h3 id="creating-a-review">Creating a Review</h3>

<ul>
  <li>Update the ActionLink for create to pass in the restaurant id - will be added to the query string, since no matching route</li>
  <li>Add an <code class="highlighter-rouge">[HttpGet]</code> create action which takes in this id and returns an empty view</li>
  <li>The default action of the form will post back to the same URL, so with therefore have the restaurantId in the query string still</li>
  <li>The default scaffolded view uses <code class="highlighter-rouge">@using (Html.BeginForm())</code> - the form implements IDisposable, so any resources are disposed of immediately, not really important here, but could be</li>
  <li>The <code class="highlighter-rouge">[HttpPost]</code> create action will have a parameter of <code class="highlighter-rouge">RestaurantReview</code> which will be populated automatically from both the POST form and the restaurant id in the query string
    <ul>
      <li>first check the model is valid: <code class="highlighter-rouge">if (ModelState.IsValid)</code>, if it isn‚Äôt just return the same view</li>
      <li>add the new review to the reviews collection e.g. <code class="highlighter-rouge">_db.Reviews.Add(review)</code></li>
      <li>save it to the database e.g. <code class="highlighter-rouge">_db.SaveChanges()</code></li>
      <li>then return to a different view where the new entity can be seen (e.g. index view)</li>
    </ul>
  </li>
</ul>

<h3 id="editing-a-review">Editing a Review</h3>

<ul>
  <li>Edit link is provided on a list page by the default scaffolding</li>
  <li>In the <code class="highlighter-rouge">[HttpGet]</code> <code class="highlighter-rouge">Edit()</code> method, the id is passed in, use <code class="highlighter-rouge">Find</code> to retrieve this review and pass to the view</li>
  <li>Need hidden fields for both the review id and the restaurant id</li>
  <li>Similar to create, the model is passed the action, <code class="highlighter-rouge">ModelState.IsValid</code> is checked and the same model returned to the view if not</li>
  <li>The DbContext <code class="highlighter-rouge">Entry</code> API tells EF that we want to start tracking an entity, set to the state to modified i.e. <code class="highlighter-rouge">_db.Entry(review).State =  EntityState.Modified</code></li>
  <li>Save changes and redirect back to an index view</li>
</ul>

<h3 id="security-implications-of-model-binding">Security implications of model binding</h3>

<ul>
  <li>Overposting or Mass assignment is the automatic model binding which will grab everything from everywhere possible to try to populate the model, potentially</li>
  <li>For more information http://odetocode.com/blogs/scott/archive/2012/03/11/complete-guide-to-mass-assignment-in-asp-net-</li>
  <li>Not the best, but one of the easiest is to use the <code class="highlighter-rouge">Bind</code> attribute on an action method e.g. <code class="highlighter-rouge">public ActionResult Edit([Bind(Exclude="ReviewerName")] RestaurantReview review)</code> (can also use <code class="highlighter-rouge">Include</code>)</li>
  <li>Another approach is to use a ViewModel</li>
</ul>

<h3 id="validation-annotations">Validation Annotations</h3>

<ul>
  <li>Use data binding attributes e.g. <code class="highlighter-rouge">[Range(1,10)]</code>, <code class="highlighter-rouge">[Required]</code>, <code class="highlighter-rouge">[StringLength(1024)]</code></li>
  <li>Other attributes include regex, comparing two properties, remote validations (calls back to the server as a user types in)</li>
  <li>After adding data annotations EF recognises that the schema is now out of date with the model</li>
  <li><code class="highlighter-rouge">Update-Database -Verbose</code> to update the schema - may fail if e.g. column previously had no length and now given a limit - use <code class="highlighter-rouge">Update-Database -Verbose -Force</code> to force the update</li>
  <li>Validations run on both server side and client side</li>
  <li>Also data attributes to influence the display e.g. <code class="highlighter-rouge">[Display(Name="User Name")]</code>, <code class="highlighter-rouge">[DisplayFormat(NullDisplayText="anonymous")]</code> - this latter only affects the display - NOT the database‚Äô</li>
</ul>

<h3 id="custom-validations">Custom Validations</h3>

<ul>
  <li>Write custom validation attributes when you want to apply to multiple models (write a class which derives from <code class="highlighter-rouge">ValidationAttribute</code>)</li>
  <li>Only happens on the server by default unless you write client side validation too</li>
  <li>Alternative is for your model to implement <code class="highlighter-rouge">IValidatableObject</code> and write the <code class="highlighter-rouge">Validate</code> method body. Here you have access to the whole model. Validation errors will be displayed where the <code class="highlighter-rouge">Html.ValidationSummary(true)</code> tag is included on the view. Changing the parameter to false will display ALL errors.</li>
</ul>

<h2 id="ajax-and-aspnet-mvc">AJAX and ASP.NET MVC</h2>

<ul>
  <li><code class="highlighter-rouge">_references.js</code>, <code class="highlighter-rouge">xxx.intellisense.js</code> - for intellisense</li>
  <li><code class="highlighter-rouge">xxx.unobtrusive...js</code> - authored by the MVC team, serve as a bridge between ASP.NET MVC and jQuery. Need the <code class="highlighter-rouge">unobtrusive</code> scripts for some of the client side validation to work - it takes metadata which is emitted by HTML helpers (e.g. EditorFor) and feeds the data into the jQuery validations</li>
  <li><code class="highlighter-rouge">@Scripts.Render("~/bundles/modernizr")</code> will emit the correct HTML to include the modernizr libraries (need to be at the top of the page)</li>
  <li><code class="highlighter-rouge">@Scripts.Render("~/bundles/jquery")</code> included at the bottom of the page (as most script files should be)</li>
  <li><code class="highlighter-rouge">@Scripts.Render()</code> and <code class="highlighter-rouge">@Styles.Render()</code> give minified bundles of JS and CSS respectively - the ASP.NET bundling feature can bundle scripts together at runtime</li>
  <li><code class="highlighter-rouge">BundleConfig.RegisterBundles(BundleCollection bundles)</code> is called from the <code class="highlighter-rouge">Application_Start()</code> in <code class="highlighter-rouge">Global.asax.cs</code>
    <ul>
      <li>the <code class="highlighter-rouge">{version}</code> tag will substitute for a version number so you can update js libraries without changing C# code</li>
    </ul>
  </li>
  <li>Bundling and minification only happens in release mode i.e. <code class="highlighter-rouge">&lt;compilation debug="true"/&gt;</code> in the web.config</li>
</ul>

<h3 id="ajax-helpers">AJAX Helpers</h3>

<ul>
  <li>Where <code class="highlighter-rouge">Html.BeginForm()</code> makes a synchronous request to the server, <code class="highlighter-rouge">Ajax.BeginForm()</code> makes an asynchronous request to the server to redraw just a portion of the screen. The <code class="highlighter-rouge">AjaxOptions</code> object passed in, tells the helper which part of the page to update.</li>
  <li><code class="highlighter-rouge">Install-Package Microsoft.jQuery.Unobtrusive.Ajax</code> to install the ajax JavaScript files and add it to an appropriate bundle.</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@using(Ajax.BeginForm(new AjaxOptions(HttpMethod="get", InsertionMode = InsertionMode.Replace, UpdateTargetId = "restaurantList")) {
    &lt;input type="search" name="searchTerm"/&gt;
    &lt;input type="submit" value="Search By Name" /&gt;
}
&lt;div id="restaurantList"&gt; ... &lt;/div&gt;
</code></pre></div></div>

<p>Just by itself this will draw a page within a page. To correct this, first put the <code class="highlighter-rouge">&lt;div id="restaurantList"&gt; ... &lt;/div&gt;</code> inside a partial view e.g. <code class="highlighter-rouge">_Restaurants.cshtml</code> and add the <code class="highlighter-rouge">@model</code> directive to strongly type it. The controller will then need to decide to either return the whole page view e.g. <code class="highlighter-rouge">Index.cshtml</code> or just the partial. In the controller add:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if (Request.IsAjaxPartial()) {
    return PartialView("_Restaurants", model);
}
return View(model);
</code></pre></div></div>

<h3 id="behind-the-scenes">Behind the scenes</h3>

<ul>
  <li>MVC provides 3 AJAX features out of the box: <code class="highlighter-rouge">Ajax.BeginForm()</code>, <code class="highlighter-rouge">Ajax.ActionLink()</code> and client side validation.</li>
  <li>These 3 features all use an approach called <strong>unobtrusive</strong> javascript which uses the HTML 5 data-* attributes to inject javascript into the page. Without javascript enabled, all features continue to work using server side functionality instead.</li>
  <li>Instead of using the built in features of e.g. <code class="highlighter-rouge">Ajax.BeginForm()</code>, a similar technique can be written from scratch</li>
  <li><code class="highlighter-rouge">@Url.Action("Index")</code> is helpful to generate the URL to the Index action</li>
</ul>

<h3 id="autocomplete">Autocomplete</h3>

<ul>
  <li>New action on the controller e.g. <code class="highlighter-rouge">public ActionResult Autocomplete(string term)</code> (documentation for jQuery uses the name <code class="highlighter-rouge">term</code> for the parameter) which queries the database, get any restaurants starting with <code class="highlighter-rouge">term</code> and projects each one into a new anonymous llobject with property called <code class="highlighter-rouge">label</code> containing the name of the restaurant.</li>
  <li>Then <code class="highlighter-rouge">return Json(model, JsonRequestBehaviour.AllowGet);</code> to return results in JSON</li>
  <li>Wire this up on the element needing autocomplete, e.g. the searchTerm <code class="highlighter-rouge">&lt;input /&gt;</code> tag using a data-* attribute e.g. <code class="highlighter-rouge">data-otf-autocomplete="@Url.Action("Autocomplete")"</code></li>
  <li>Then write the JavaScript to implement this:
    <ul>
      <li>add the javascript to each element using a function <code class="highlighter-rouge">$("input[data-otf-autocomplete]").each(createAutocomplete);</code></li>
      <li>the <code class="highlighter-rouge">createAutocomplete</code> function will
        <ul>
          <li>get the input in question, wrap in jQuery using <code class="highlighter-rouge">$()</code> e.g. <code class="highlighter-rouge">$input = $(this)</code></li>
          <li>construct an options object which at a minimum has a <code class="highlighter-rouge">source</code> property - the URL to get the data from</li>
          <li>finally call the jQuery autocomplete function on the input object e.g. <code class="highlighter-rouge">$input.autocomplete(options)</code></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>The option <code class="highlighter-rouge">select</code> can define a function which will be invoked when the element in the drop down list is selected. In this way, when selecting the options, you can also trigger the search at the same time.</li>
</ul>

<h3 id="paging">Paging</h3>

<ul>
  <li>Using <code class="highlighter-rouge">PagedList.Mvc</code> NuGet package (which in turn depends on package <code class="highlighter-rouge">PagedList</code>)</li>
  <li>Adds extension methods for LINQ, HTML helpers and a PagedList.css</li>
  <li>In the controller:
    <ul>
      <li>Add a new integer parameter to the Action called page with a default value of 1 e.g. <code class="highlighter-rouge">, int page = 1)</code></li>
      <li>Convert the regular list received from EF to a <code class="highlighter-rouge">PagedList</code> using the extension method <code class="highlighter-rouge">ToPagedList(page, 10)</code>, specifying the page and the size</li>
    </ul>
  </li>
  <li>In the UI:
    <ul>
      <li>Update the model declaration from <code class="highlighter-rouge">IEnumerable</code> to <code class="highlighter-rouge">IPagedList</code></li>
      <li>To avoid fully qualifying each type, add the namespaces following to the web.config <strong>in the Views folder</strong></li>
      <li>Add a call the HTML helper <code class="highlighter-rouge">@Html.PagedListPager(Model, page =&gt; Url.Action("Index", new { page }), PagedListRenderOptions.MinimalWithItemCountText</code>
        <ul>
          <li>lamda expression which given a page will return the URL to go to that page. The PagedListPager will pass the page</li>
        </ul>
      </li>
      <li>Add the PagedList.css to a bundle</li>
    </ul>
  </li>
</ul>

<p>To convert the paging from a full post back to partial post backs using JavaScript, as with search we could wire up an event on the anchor tags. However this is part of the HTML in the partial view which gets rerendered each time we search, so they would have to be rewired with every partial page load. Instead wire up the event to something outside of this section e.g. the <code class="highlighter-rouge">main-content</code> div, specifying how to filter the events:</p>

<p><code class="highlighter-rouge">$(".main-content").on("click", ".pagedList a", getPage)</code></p>

<p>The <code class="highlighter-rouge">getPage</code> function has been written to be generic:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var getPage = function() {
    var $a = $(this); // wrap the 'a' with jQuery so we can
    var options = {
        url: $a.attr("href"),
        data: $("form").serialize(), // add the form vars to the request so anything in the search box is taken into account
        type: "get"
    };
    $.ajax(options).done(function(data)) {
        var target = $a.parents("div.pagedList").attr("data-otf-target"); // generic way of doing this
        $(target).replaceWith(data);
    });
    return false;
}
</code></pre></div></div>

<h2 id="security-and-aspnet-mvc">Security and ASP.NET MVC</h2>

<h3 id="authentication">Authentication</h3>

<p>There are 3 ways to identify a user in ASP.NET:</p>
<ol>
  <li>Forms authentication - the website provides a page with an input form, user enters username and password, application checks password - relies on cookies and SSL</li>
  <li>OpenID / OAuth - rely on a third party to authenticate the user and then tell you who they are</li>
  <li>Windows authentication - also know as ‚ÄúIntegrated Auth‚Äù, for intranets</li>
</ol>

<h4 id="windows-authentication">Windows Authentication</h4>

<ul>
  <li>Changing VS generated forms authentication over to windows authentication is possible, but messy. Best to start again!</li>
  <li>IE will not work with ‚Äúlocalhost‚Äù off the bat until you add localhost to the intranet sites list</li>
</ul>

<h4 id="forms-authentication">Forms Authentication</h4>

<ul>
  <li>ASP.NET with forms authentication configured will automatically redirect to the configured login page if a user tries to access a restricted page</li>
  <li>ASP.NET sets an authentication cookie to track users authentication status</li>
  <li>In ASP.NET MVC 4 - project template automatically includes controllers, views and models.
    <ul>
      <li>The controller makes use of a class called <code class="highlighter-rouge">WebSecurity</code> from a Microsoft library named WebMatrix.</li>
      <li><code class="highlighter-rouge">WebSecurity</code> in turn talks to a component called <code class="highlighter-rouge">SimpleMembershipProvider</code></li>
    </ul>
  </li>
  <li>You can customise the information stored about a particular user
    <ul>
      <li>Inside the Filters folder - <code class="highlighter-rouge">InitializeSimpleMembershipAttribute.cs</code> - forms auth is initialised in a lazy manner in case you don‚Äôt want to use forms auth</li>
      <li>If you do want to use this, you can move the call to <code class="highlighter-rouge">WebSecurity.InitializeDatabaseConnection(...)</code> to the <code class="highlighter-rouge">Application_Start()</code> method and delete the filter</li>
      <li>Also, you may want to change the <code class="highlighter-rouge">AccountModels.cs</code> file.
        <ul>
          <li>Inside this file, there is a <code class="highlighter-rouge">UsersContext</code> class, which gives access to the <code class="highlighter-rouge">UsersProfile</code> table. However this table can simply be added to the <code class="highlighter-rouge">DbContext</code> for the application instead.</li>
          <li>Additionally move the <code class="highlighter-rouge">UserProfile.cs</code> file into the models folder and customise as required e.g. <code class="highlighter-rouge">string FavouriteRestaurant</code></li>
          <li>Add the <code class="highlighter-rouge">DbSet&lt;UserProfile&gt; </code> to your existing DbContext class</li>
          <li>Remove the <code class="highlighter-rouge">[InitializeSimpleMembership]</code> attribute fromt the <code class="highlighter-rouge">AccountController</code> class</li>
          <li>Change any existing references to the generated DbContext to the existing DbContext class</li>
          <li>Run <code class="highlighter-rouge">Update-Database</code> to create the <code class="highlighter-rouge">UserProfile</code> table (implicit migrations enabled)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>The database tables created and used by WebSecurity are prefixed with <code class="highlighter-rouge">webspages_</code>: <code class="highlighter-rouge">webpages_Membership</code>, <code class="highlighter-rouge">webpages_OAuthMembership</code>, <code class="highlighter-rouge">webpages_Roles</code>, <code class="highlighter-rouge">webpages_UsersInRoles</code></li>
</ul>

<h3 id="authorisation">Authorisation</h3>

<h4 id="seeding-membership">Seeding Membership</h4>

<ul>
  <li>Either SQL or use the <code class="highlighter-rouge">SimpleMembershipProvider</code> APIs (more robust) in the <code class="highlighter-rouge">Seed()</code> method
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  WebSecurity.InitializeDatabaseConnection( ... )
  var roles = (SimpleRoleProvider)Roles.Provider; // use to check and create roles
  var membership = (SimpleMembershipProvider)Membership.Provider; // used to check and create users

  // add actual data checks and insert
</code></pre></div>    </div>
  </li>
  <li>This will not work out of the box in library project rather than a real web project. Requires some configuration in the web.config. Explicitly configure the <code class="highlighter-rouge">&lt;roleManager .../&gt;</code> and the <code class="highlighter-rouge">&lt;membership .../&gt;</code>, clearing any previously configured providers and adding the simple membership ones</li>
  <li><code class="highlighter-rouge">User.Identity.Name</code> to get a user‚Äôs username</li>
  <li><code class="highlighter-rouge">User.IsInRole("admin")</code> to check role membership</li>
</ul>

<h3 id="cross-site-request-forgery-csrf-c-serf">Cross Site Request Forgery CSRF (C-Serf)</h3>

<ul>
  <li>This happens when a user who is authenticated on a particular application e.g. facebook to clicks on a link. This page then submits a form to facebook doing something malicious. Can also be used to send all cookies via javascript etc.</li>
  <li>In order to prevent this, need to ensure the user is clicking on a form that has been served to them by the correct web server</li>
  <li>In ASP.NET MVC this is achieved via an <code class="highlighter-rouge">AntiForgeryToken</code>.
    <ul>
      <li>On the form submit action add the attribute <code class="highlighter-rouge">[ValidateAntiForgeryToken</code> - this checks a <code class="highlighter-rouge">__RequestVerificationToken</code> field (which doesn‚Äôt exist by default)</li>
      <li>Add the verification token to the form using <code class="highlighter-rouge">Html.AntiForgeryToken()</code> somewhere on the form - this generates a cryptographically significant value is added both to the form and a cookie. It needs to match on both the form and in the cookie for MVC to allow the request. This works since browsers don‚Äôt allow one site to set cookies for a different site</li>
    </ul>
  </li>
</ul>

<h3 id="openid--oauth">OpenID / OAuth</h3>

<ul>
  <li>OIDC support is added to MVC via an open source project called DotNetOpenAuth: http://www.dotnetopenauth.net</li>
  <li>The <code class="highlighter-rouge">RegisterAuth()</code> method inside the <code class="highlighter-rouge">AuthConfig</code> class has various blocks of commented out code to register - most require some kind of configuration on the 3rd party, but otherwise support is out of the box</li>
  <li>Can either log in with an external account OR a local account - if you already have a local account, but now wish to link an external account, that is possible on the default ‚ÄúManage Account‚Äù page</li>
</ul>

<h2 id="aspnet-mvc-infrastructure">ASP.NET MVC Infrastructure</h2>

<h3 id="caching">Caching</h3>

<ul>
  <li><code class="highlighter-rouge">[OutputCache]</code> action filter will cache action results e.g. <code class="highlighter-rouge">[OutputCache(Duration=60, VaryByParam="none")]</code> (where duration is specified in seconds)</li>
  <li>Best strategory for caching is first gather metrics to know where caching would best be utilised</li>
  <li>Can also be used on child actions - so parts of the page can be cached, but not the whole page</li>
  <li>Other settings include:
    <ul>
      <li><code class="highlighter-rouge">VaryByParam</code> will default to ‚Äò*‚Äô caching for every permutation possible (which is usually what is wanted), ‚Äúnone‚Äù would always return the same results, ‚Äúname1;name2‚Äù to vary by named parameters</li>
      <li><code class="highlighter-rouge">Location</code> defaults to anywhere - cached on the server, and the client can also cache the result, but can be more specific</li>
      <li><code class="highlighter-rouge">VaryByHeader</code> vary on a header e.g. <code class="highlighter-rouge">Accept-Language</code> to ensure cached English text is not returned to a browser requesting the page in German</li>
      <li><code class="highlighter-rouge">VaryByCustom</code> - override a method on Global.asax to create a custom caching logic</li>
      <li><code class="highlighter-rouge">SqlDependency</code> - cache until data in a sql server table changes - not widely used - restrictions on type of SQL query can be used</li>
    </ul>
  </li>
  <li>Be careful if there are AJAX calls to populate content on the page - the response which will be cached may or may not be the full page and if the content is fetched differently the second time, this could lead to strange results. <code class="highlighter-rouge">VaryByHeader</code> can be used to vary with the <code class="highlighter-rouge">X-Requested-With</code> header which is different for AJAX requests
    <ul>
      <li>be aware that some browsers won‚Äôt treat these any differently, additionally adding <code class="highlighter-rouge">Location = OutputCacheLocation.Server</code> fixes this</li>
      <li>Alternatively can use a different action for the AJAX request</li>
    </ul>
  </li>
  <li>Difficult to predict cache duration in development - put into production - add load - make adjustments - to help there is a <code class="highlighter-rouge">CacheProfile</code> attribute which names a profile which can then be defined in config (<code class="highlighter-rouge">&lt;system.web&gt;&lt;caching&gt; ...</code>) - central place for all values to be defined as well as ability to update in production</li>
</ul>

<h3 id="localisation-and-culture">Localisation and Culture</h3>

<ul>
  <li>Two settings:
    <ul>
      <li><code class="highlighter-rouge">Thread.CurrentCulture</code> impacts fomatting e.g. for dates and currencies</li>
      <li><code class="highlighter-rouge">Thread.CurrentUICulture</code> impacts resource loading</li>
    </ul>
  </li>
  <li>Properties can be set manually if the UI allows the user to select this manually OR ASP.NET can set these for you via the <code class="highlighter-rouge">Accept-Language</code> header - configured in web.config - <code class="highlighter-rouge">&lt;system.web&gt;&lt;globalization culture="auto" uiCulture="auto"/&gt;&lt;/system.web&gt;</code></li>
  <li>A resource file e.g. Strings.resx can have a localized version e.g. Strings.es.resx. The Build Action will be Embedded Resource by default.</li>
  <li>Resouces files can live within the web project, or a seperate library - simply add a .resx file - change the access modifier (drop down at the top of the resx editor) from internal to public - razor views are compiled into a different assembly than the web project and without the resx being public, they can‚Äôt be seen by the views</li>
  <li>Data annotations can also use resources e.g. <code class="highlighter-rouge">[Required]</code> on a property would become <code class="highlighter-rouge">[Required(ErrorMessageResourceType=typeof(OdeToFood.Resources), ErrorMessageResourceString="RestaurantNameRequiredErrorMessage"])</code></li>
</ul>

<h3 id="diagnostics">Diagnostics</h3>

<ul>
  <li>ASP.NET Health Monitoring - use <code class="highlighter-rouge">&lt;healthMonitorying enabled="true"&gt;&lt;rules&gt;&lt;add ...</code> - in the machine level web.config inside C:\windows\microsoft.net\framework\v4‚Ä¶\config
    <ul>
      <li>Built in providers are the event log, sql server and wmi</li>
      <li><code class="highlighter-rouge">&lt;eventMappings/&gt;</code> section groups different types of events into buckets</li>
      <li><code class="highlighter-rouge">&lt;rules/&gt;</code> section adds mappings between events and providers - by default ‚ÄúAll Errors‚Äù and ‚ÄúFailure Audits Default‚Äù go the the Event log</li>
    </ul>
  </li>
  <li>log4net</li>
  <li>elmah</li>
  <li>P&amp;P Application Logging Block</li>
</ul>

<h2 id="unit-testing-with-aspnet-mvc">Unit Testing with ASP.NET MVC</h2>

<h2 id="deployment-and-configuration">Deployment and Configuration</h2>

<h3 id="configuration-files">Configuration Files</h3>

<ul>
  <li>XML files control environment settings: Authentication, Compilation, Connections, Cryptography, Custom Errors</li>
  <li>Hierarchical - lower level settings can (if not locked down) override higher level settings
    <ul>
      <li><code class="highlighter-rouge">machine.config</code> (settings for all .NET applications)</li>
      <li>Machine level <code class="highlighter-rouge">web.config</code> (settings for all ASP.NET applications)</li>
      <li>Parent‚Äôs <code class="highlighter-rouge">web.config</code> - if the application is deployed underneath another application</li>
      <li><code class="highlighter-rouge">web.config</code> - inside the root of the application and optionally inside subfolders e.g. the <code class="highlighter-rouge">Views</code> folder</li>
    </ul>
  </li>
</ul>

<p>The <code class="highlighter-rouge">machine.config</code> and machine level <code class="highlighter-rouge">web.config</code> are in C:\Windows\Microsoft.NET\Framework\v4.0.30319\Config.
The <code class="highlighter-rouge">Views</code>‚Äôs folders <code class="highlighter-rouge">web.config</code> contains a FileNotFound handler which returns a 404 if anyone tries to request a view file directly in the URL (rather than going via a controller).</p>

<h3 id="hosting">Hosting</h3>

<p>MVC compiles to a DLL and requires a host process to execute, to deliver HTTP requests to the logic inside the dll.
w3wp.exe - per app pool</p>

<h3 id="preparation-for-deployment">Preparation for Deployment</h3>

<ul>
  <li>Turn automatic migrations off again <code class="highlighter-rouge">AutomaticMigrationsEnabled = "false"</code></li>
  <li>Delete the original migration script</li>
  <li>Delete the database</li>
  <li>Get rid of any test data seed creations</li>
  <li><code class="highlighter-rouge">Add-Migration InitialCreate</code></li>
  <li>Set the migrations to run automatically on deployment - can either do via code or configuration, example code below:</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>using System.Data.Entity.Migrations;

var migrator = new DbMigrator(new Configuration()); // Configuration is in the Migrations folder
migrator.Update();
</code></pre></div></div>

:ET