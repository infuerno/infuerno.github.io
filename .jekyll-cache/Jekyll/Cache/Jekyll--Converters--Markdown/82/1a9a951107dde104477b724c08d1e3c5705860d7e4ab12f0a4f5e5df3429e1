I"`j<p>Reference: <a href="http://mislav.uniqpath.com/poignant-guide/">http://mislav.uniqpath.com/poignant-guide/</a> and <a href="http://poignant.guide/book/">http://poignant.guide/book/</a></p>

<h2 id="chapter-2-konnichi-wa-ruby">Chapter 2 Kon’nichi wa, Ruby</h2>

<blockquote>
  <p>This book is a poignant guide to Ruby. That means code so beautiful that tears are shed.</p>
</blockquote>

<p>Three reasons to learn Ruby:</p>

<ol>
  <li>Brain Health</li>
</ol>

<blockquote>
  <p>Creative skills, people. Deduction. Reason. Nodding intelligently. The language will become a tool for you to better connect your mind to the world. I’ve noticed that many experienced users of Ruby seem to be clear thinkers and objective. (In contrast to: heavily biased and coarse.)</p>
</blockquote>

<ol>
  <li>One man on an island</li>
</ol>

<blockquote>
  <p>Ruby was born in Japan. Which is freaky. Japan is not known for its software. And since programming languages are largely written in English, who would suspect a language to come from Japan?
It’s triumphant and noble and all that. Support diversity. Help us tilt the earth just a bit.</p>
</blockquote>

<ol>
  <li>Free</li>
</ol>

<blockquote>
  <p>Using Ruby costs nothing. The code to Ruby itself is open for all of the world to inhale/exhale. Heck, this book is free. It’s all part of a great, big giveaway that should have some big hitch to it.</p>
</blockquote>

<blockquote>
  <p>With that, it’s time for the book to begin. You can now get out your highlighter and start dragging it along each captivating word from this sentence on. I think I have enough hairspray and funny money on my person to keep me sustained until the final page.</p>
</blockquote>

<h2 id="chapter-3-a-quick-and-hopefully-painless-ride-through-ruby-with-cartoon-foxes">Chapter 3 A Quick (and Hopefully Painless) Ride Through Ruby (with Cartoon Foxes)</h2>

<h3 id="the-parts-of-speech">The parts of speech</h3>

<table>
  <thead>
    <tr>
      <th>Part</th>
      <th>Notes</th>
      <th>Examples</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Variables</td>
      <td>Plain, lowercase words consisting of letters, digits and underscores</td>
      <td><code class="highlighter-rouge">x</code>, <code class="highlighter-rouge">y</code>, <code class="highlighter-rouge">banana2</code>, <code class="highlighter-rouge">phone_a_quail</code></td>
    </tr>
    <tr>
      <td>Numbers</td>
      <td>Integers or floats, plus or minus, floats have decimal places and can be written in scentific notation</td>
      <td><code class="highlighter-rouge">2</code>, <code class="highlighter-rouge">-10000</code>, <code class="highlighter-rouge">3.14</code>, <code class="highlighter-rouge">12.043e-04</code></td>
    </tr>
    <tr>
      <td>Strings</td>
      <td>Any sort of characters surrounded by quotes</td>
      <td><code class="highlighter-rouge">"sealab"</code>, <code class="highlighter-rouge">'2021'</code>, <code class="highlighter-rouge">"These cartoons are hilarious!"</code></td>
    </tr>
    <tr>
      <td>Symbols</td>
      <td>Words looking like variables, starting with a colon, lightweight strings usually used when you won’t be printing the string to the screen</td>
      <td><code class="highlighter-rouge">:a</code>, <code class="highlighter-rouge">:b</code>, <code class="highlighter-rouge">:ponce_de_leon</code></td>
    </tr>
    <tr>
      <td>Constants</td>
      <td>Like variables but capitalised, warning if you try to change initial value</td>
      <td><code class="highlighter-rouge">Time</code>, <code class="highlighter-rouge">Array</code>, <code class="highlighter-rouge">Bunny_Lake_is_Missing</code></td>
    </tr>
    <tr>
      <td>Methods</td>
      <td>Verbs, usually attached to the end of variables by a dot, can be chained, both exclamation marks and question marks can be used in method names</td>
      <td><code class="highlighter-rouge">open</code>, <code class="highlighter-rouge">close</code>,  <code class="highlighter-rouge">front_door.open.close</code>, <code class="highlighter-rouge">is_open?</code></td>
    </tr>
    <tr>
      <td>Method arguments</td>
      <td>Arguments are attached to the end of a method surrounded by parentheses and separated by a comma</td>
      <td><code class="highlighter-rouge">front_door.paint( 3, :red )</code>, <code class="highlighter-rouge">front_door.paint( 3, :red ).dry( 30 ).close()</code></td>
    </tr>
    <tr>
      <td>Kernel methods</td>
      <td>Common methods, don’t usually use parentheses</td>
      <td><code class="highlighter-rouge">print "See, no dot."</code></td>
    </tr>
    <tr>
      <td>Class methods</td>
      <td>Usually attached after variables and constants, joined by a double colon</td>
      <td><code class="highlighter-rouge">Door::new( :oak )</code></td>
    </tr>
    <tr>
      <td>Global variables</td>
      <td>Variables beginning with <code class="highlighter-rouge">$</code></td>
      <td><code class="highlighter-rouge">$x</code>, <code class="highlighter-rouge">$1</code>, <code class="highlighter-rouge">$chunky</code>, <code class="highlighter-rouge">$CHunKY_bACOn</code></td>
    </tr>
    <tr>
      <td>Instance variables</td>
      <td>Variables beginning with <code class="highlighter-rouge">@</code>, often used to define the attributes of something</td>
      <td><code class="highlighter-rouge">@width</code></td>
    </tr>
    <tr>
      <td>Class variables</td>
      <td>Variables beginning with <code class="highlighter-rouge">@@</code>, defines an attribute for all objects in a class (@@ = attribute all)</td>
      <td><code class="highlighter-rouge">@@x</code>, <code class="highlighter-rouge">@@y</code>, <code class="highlighter-rouge">@@i_will_take_you</code></td>
    </tr>
    <tr>
      <td>Blocks</td>
      <td>Any code surrounded by curly braces or <code class="highlighter-rouge">do</code> and <code class="highlighter-rouge">end</code></td>
      <td><code class="highlighter-rouge">2.times { print "yes, never again" }</code></td>
    </tr>
    <tr>
      <td>Block arguments</td>
      <td>A set of variables surrounded by pipe characters, used at the beginning of a block</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ranges</td>
      <td>Two values surrounded by parentheses and separated by an ellipsis, a third dot indicates that the final value is not included</td>
      <td><code class="highlighter-rouge">(1..3)</code>, <code class="highlighter-rouge">('a'..'z')</code>, <code class="highlighter-rouge">(0...5)</code></td>
    </tr>
    <tr>
      <td>Arrays</td>
      <td>A list surrounded by square brackets, a collection of things, but kept in a specific order</td>
      <td><code class="highlighter-rouge">[1, 2, 3]</code>, <code class="highlighter-rouge">['coat', 'mittens', 'snowboard']</code></td>
    </tr>
    <tr>
      <td>Hashes</td>
      <td>A dictionary surrounded by curly braces, matches words to definitions</td>
      <td><code class="highlighter-rouge">{'a' =&gt; 'aardvark', 'b' =&gt; 'badger'}</code></td>
    </tr>
    <tr>
      <td>Regular expressions</td>
      <td>Regex surrounded by slashes</td>
      <td><code class="highlighter-rouge">/ruby/</code>, <code class="highlighter-rouge">/[0-9]+/</code>, <code class="highlighter-rouge">/^\d{3}-\d{3}-\d{4}/</code></td>
    </tr>
    <tr>
      <td>Operators</td>
      <td>Required for maths or comparing things</td>
      <td>!  ~  *  /  %  +  -  &amp;</td>
    </tr>
    <tr>
      <td>Keywords</td>
      <td>Ruby has a number of built-in words, imbued with meaning</td>
      <td><code class="highlighter-rouge">return</code>, <code class="highlighter-rouge">self</code>, <code class="highlighter-rouge">super</code></td>
    </tr>
  </tbody>
</table>

<h2 id="chapter-4-floating-little-leaves-of-code">Chapter 4 Floating Little Leaves of Code</h2>

<blockquote>
  <p>By the end of this chapter, you will know Ruby’s beauty. The coziness of the code will become a down sleeping bag for your own solace.</p>
</blockquote>

<h3 id="animal-perfect-mission-statement">Animal perfect mission statement</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>blue_crystal = 1
leaf_tender = 5
</code></pre></div></div>

<blockquote>
  <p>The equals sign is used for assignment. <strong>This concept right here is half of Ruby</strong>. We’re defining. We’re creating. This is half of the work. Assignment is the most basic form of defining.</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pipe.catch_a_star
</code></pre></div></div>

<blockquote>
  <p>Variable <code class="highlighter-rouge">pipe</code>. Method <code class="highlighter-rouge">catch_a_star.</code> A lot of Rubyists like to think of methods as a message. Whatever comes before the dot is handed the message. The above code tells the <code class="highlighter-rouge">pipe</code> to <code class="highlighter-rouge">catch_a_star</code>.
<strong>This is the second half of Ruby</strong>. Putting things in motion. These things you define and create in the first half start to act in the second half.</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>captive_star = pipe.catch_a_star
</code></pre></div></div>

<blockquote>
  <p>It’s up to you to collect the miserable, little star. If you don’t, it’ll simply vanish.</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>starmonkey = ratchet.attach( captive_monkey, captive_star )
starmonkey = ratchet.attach( captive_monkey, pipe.catch_a_star ) + deco_hand_frog
</code></pre></div></div>

<h3 id="nil">Nil</h3>

<p><code class="highlighter-rouge">nil</code> represents emptiness, without value. It is <strong>not</strong> undefined, Ruby knows about it, and it is <code class="highlighter-rouge">nil</code>.</p>

<h3 id="false">False</h3>

<p><code class="highlighter-rouge">nil</code> and <code class="highlighter-rouge">false</code> are the only two negative concepts in Ruby.<br />
Everything else is positive.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if plastic_cup
  print "Plastic cup is on the up 'n' up!"
end
</code></pre></div></div>

<p>If <code class="highlighter-rouge">plastic_cup</code> is either <code class="highlighter-rouge">nil</code> or <code class="highlighter-rouge">false</code>, nothing will be printed.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>unless plastic_cup
  print "Plastic cup is on the down low."
end
</code></pre></div></div>

<p>Conversely using <code class="highlighter-rouge">unless</code> will only print to the screen if <code class="highlighter-rouge">plastic_cup</code> is either <code class="highlighter-rouge">nil</code> or <code class="highlighter-rouge">false</code>.</p>

<p><code class="highlighter-rouge">if</code> and <code class="highlighter-rouge">unless</code> can also be used at the end of a line of code:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print "Yeah, plastic cup is up again!" if plastic_cup
print "Hardly. It's down." unless plastic_cup
</code></pre></div></div>

<p>or combined:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print "We're using plastic 'cause we don't have glass." if plastic_cup unless glass_cup
# do this only if a is true and b isn’t true.
</code></pre></div></div>

<h3 id="double-equals-is-a-method">Double equals is a method</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>approaching_guy.==( true )
</code></pre></div></div>

<p>This method will return true or false. It is the same as using <code class="highlighter-rouge">==</code></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if approaching_guy == true`...
</code></pre></div></div>

<p>Assignment can be used in conjunction with if:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>at_hotel = true
email = if at_hotel
          "why@hotelambrose.com"
        else
          "why@drnhowardcham.com"
        end
</code></pre></div></div>

<p>If there are several lines of code in the <code class="highlighter-rouge">if</code> statement <strong>only the answer from the last full statement will be used</strong>.</p>

<h3 id="is-the-concatenation-operator">« is the concatenation operator</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>address = "5 Oxford Street"
address.&lt;&lt;(", London") # OR address &lt;&lt; ", London"
</code></pre></div></div>

<h3 id="nil-1">nil?</h3>

<p>The <code class="highlighter-rouge">nil?</code> method can be used on any value in Ruby. Obviously if value is either <code class="highlighter-rouge">true</code> or <code class="highlighter-rouge">false</code>, then it is not <code class="highlighter-rouge">nil</code>. <code class="highlighter-rouge">nil</code> is again, not the same as undefined.</p>

<p>If you use a variable without declaring it, a <code class="highlighter-rouge">NameError</code> exception will be thrown.</p>

<h3 id="hashes">Hashes</h3>

<p>A value from a hash or dictionary of code words can be retrieved using the <code class="highlighter-rouge">[]</code> method.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>code_words.[]( 'catapult' ) # OR code_words['catapult']
</code></pre></div></div>

<h3 id="file-operations">File operations</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>require 'wordlist'

# Get evil idea and swap in code words
print "Enter your new idea: " 
idea = gets
code_words.each do |real, code|
	idea.gsub!( real, code ) 
end

# Save the jibberish to a new file
print "File encoded. Please enter a name for this idea: " 
idea_name = gets.strip
File::open( "idea-" + idea_name + ".txt", "w" ) do |f|
	f &lt;&lt; idea 
end
</code></pre></div></div>

<p>This starts with the kernel method <code class="highlighter-rouge">require</code> which can be used anywhere and will pull in the contents of an external file, in this case called wordlist.rb.</p>

<p>Input from the terminal is stored in <code class="highlighter-rouge">idea</code>, and then for each entry in the dictionary a replacement is done using <code class="highlighter-rouge">gsub!</code>, short for <em>global substitution</em>, used for search and replace</p>

<p>The <code class="highlighter-rouge">each</code> method is available for Arrays, Hashes and Strings and in this case will iterate over each pair in the hash.</p>

<p>The coded idea is then saved to a file. It is important to call <code class="highlighter-rouge">strip</code> on the input from <code class="highlighter-rouge">gets</code> since this will remove the <code class="highlighter-rouge">\n</code> on the end.</p>

<p>The class method <code class="highlighter-rouge">File::open</code> is used to create a new file. In fact all the kernel methods so far mentioned are actually class methods.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Kernel:: print( "hello world" )
</code></pre></div></div>

<blockquote>
  <p>What does this mean? Why does it matter? It means <code class="highlighter-rouge">Kernel</code> is the center of Ruby’s universe. Wherever you are in your script, <code class="highlighter-rouge">Kernel</code> is right beside you. You don’t even need to spell <code class="highlighter-rouge">Kernel</code> out for Ruby. Ruby knows to check <code class="highlighter-rouge">Kernel</code>.</p>
</blockquote>

<p>The <code class="highlighter-rouge">File</code> class contains many methods to read, rename, delete etc files. The <code class="highlighter-rouge">File::open</code> method takes two variables, the filename and the file mode:</p>

<ul>
  <li><code class="highlighter-rouge">w</code> to write to a new file</li>
  <li><code class="highlighter-rouge">r</code> to read from a file</li>
  <li><code class="highlighter-rouge">a</code> to append to a file</li>
</ul>

<p>The file is opened and a variable is returned to represent the file, in this case called <code class="highlighter-rouge">f</code>. We can use the operator <code class="highlighter-rouge">&lt;&lt;</code> to write to the file, since this method is defined on files.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>require 'wordlist'

# Print each idea out with the words fixed
Dir['idea-*.txt'].each do |file_name| 
	idea = File.read( file_name ) 
	code_words.each do |real, code|
		idea.gsub!( code, real ) 
	end
	puts idea
end
</code></pre></div></div>

<p><code class="highlighter-rouge">Dir[path]</code> searches a directory and returns a list of all matching files in the directory specified. This is an alternative for <code class="highlighter-rouge">Dir.[](path)</code> which is an alternative for <code class="highlighter-rouge">Dir::[](path)</code>.
<code class="highlighter-rouge">File.open</code> is alternative syntax for <code class="highlighter-rouge">File::open</code>.</p>

<p>Although the <code class="highlighter-rouge">.</code> notation can also be used for class methods, using <code class="highlighter-rouge">::</code> makes it more obvious that you are using a class method rather than an instance method.</p>

<h3 id="p">p</h3>
<p><code class="highlighter-rouge">p</code> is similar to <code class="highlighter-rouge">print</code> and <code class="highlighter-rouge">puts</code>, but will display anything (where <code class="highlighter-rouge">print</code> is only designed for displaying strings).</p>

<blockquote>
  <p><code class="highlighter-rouge">p foo</code> does <code class="highlighter-rouge">puts foo.inspect</code>, i.e. it prints the value of <code class="highlighter-rouge">inspect</code> instead of <code class="highlighter-rouge">to_s</code>, which is more suitable for debugging (because you can e.g. tell the difference between 1, “1” and “2\b1”, which you can’t when printing without inspect).<br />
Ruby documenation: <a href="http://www.ruby-doc.org/core-2.0.0/Kernel.html#M005961">http://www.ruby-doc.org/core-2.0.0/Kernel.html#M005961</a><br />
Note that <code class="highlighter-rouge">p</code> also returns the value of the object, while <code class="highlighter-rouge">puts</code> does not. 
Reference: <a href="http://stackoverflow.com/questions/1255324/p-vs-puts-in-ruby">http://stackoverflow.com/questions/1255324/p-vs-puts-in-ruby</a></p>
</blockquote>

<h3 id="methods">::methods</h3>

<p>This method will list all the methods available on an object</p>

<h3 id="using-hashes-as-quick-and-dirty-custom-data-structures">Using hashes as quick and dirty custom data structures</h3>

<p>Define a custom class <code class="highlighter-rouge">kitty_toy</code> which has a <code class="highlighter-rouge">:shape</code> and a <code class="highlighter-rouge">:fabric</code>. Then instantiate a number of these, put them in a list and then sort them according to one attribute or another.</p>

<p>Alternatively create several hashes with the same keys, add these to a list and sort according to common keys in each hash.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kitty_toys = [
  {:shape =&gt; 'sock', :fabric =&gt; 'cashmere'},
  {:shape =&gt; 'mouse', :fabric =&gt; 'calico'},
  {:shape =&gt; 'eggroll', :fabric =&gt; 'chenille'}
]
kitty_toys.sort_by { |toy| toy[:fabric] }
</code></pre></div></div>

<p>This will throw an <code class="highlighter-rouge">ArgumentError</code> if one of the hashes does not contain this key.</p>

<p>The <code class="highlighter-rouge">sort_by</code> method is an <strong>iterator</strong> which will iterate through the list of hashes.</p>

<h3 id="next">next</h3>

<p><code class="highlighter-rouge">next</code> will let you skip onto the next item in an iteration.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>non_eggroll = 0
kitty_toys.each do |toy|
  next if toy[:shape] == 'eggroll'
  non_eggroll = non_eggroll + 1
end
</code></pre></div></div>

<h3 id="break">break</h3>

<p><code class="highlighter-rouge">break</code> kicks you out of an iterating loop altogether.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kitty_toys.each do |toy|
  break if toy[:fabric] == 'chenille'
  p toy
end
</code></pre></div></div>

<h2 id="chapter-5-them-what-make-the-rules-and-them-what-live-the-dream">Chapter 5 Them What Make the Rules and Them What Live the Dream</h2>

<h3 id="casewhen">case..when</h3>

<p>Either with or without else</p>

<h3>===</h3>

<p>The triple equals checks equality in a <em>flexible</em> way. It depends on context.
<code class="highlighter-rouge">(1895..1913) === 1896</code> is true.
<code class="highlighter-rouge">(1895..1913) === 2008</code> is false.</p>

<h3 id="scope">scope</h3>

<p>Variables declared outside of methods cannot normally be seen inside them. Blocks <strong>do</strong> see variables outside of them. Block arguments do not exist outside of the block.</p>

<p><strong>Note</strong> If block arguments are named the same as an existing variable, the contents of the variable will be overwritten and the variable available with the changed argument after the block exits.</p>

<p><code class="highlighter-rouge">@</code> denotes an instance level variable, available to all methods in that instance.
<code class="highlighter-rouge">@@</code> denotes a class level variable, available to all instances of that class.
<code class="highlighter-rouge">$</code> denotes a global variable, available everywhere.</p>

<h3 id="def-and-class">def and class</h3>

<p><code class="highlighter-rouge">def</code> is used to define a method.</p>

<p><code class="highlighter-rouge">class</code> is used to define a class.</p>

<p>Everything in ruby is an object and the <code class="highlighter-rouge">class</code> method will return the name of the class of any object.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print 5.class							# prints 'Integer' 
print 'wishing for antlers'.class	# prints 'String' 
print WishMaker.new.class			# prints 'WishMaker'
</code></pre></div></div>

<h3 id="inspecting-metadata">Inspecting metadata</h3>

<p><code class="highlighter-rouge">Object::constants</code> will list all top-level constants. This will also list all loaded classes.<br />
<code class="highlighter-rouge">Hash::methods</code> will list all the methods of a certain class<br />
<code class="highlighter-rouge">Hash::class_variables</code> lists the class variables<br />
<code class="highlighter-rouge">Hash::constants</code> lists the constants for a particular class</p>

<h3 id="checking-method-arguments">Checking method arguments</h3>

<p>It is good practice to check any method arguments. <code class="highlighter-rouge">include?</code> works fine with strings, arrays, hashes etc but this method is not defined for a number, so will throw an exception.</p>

<p>Rather than checking the type of the argument, you can just check if a certain method is defined for that type using <code class="highlighter-rouge">responds_to</code> (which returns <code class="highlighter-rouge">true</code> or <code class="highlighter-rouge">false</code>).</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def wipe_mutterings_from( sentence ) 
	unless sentence.respond_to? :include?
		raise ArgumentError,
		"cannot wipe mutterings from a #{ sentence.class }"
	end
	...
end
</code></pre></div></div>

<h4 id="using-symbols">Using symbols</h4>

<p>In the example above a symbol <code class="highlighter-rouge">:include</code> was used. Symbols are generally used when referring to a method or other Ruby construct. Strings will work too, but Ruby will recognise symbols faster.</p>

<h4 id="changing-method-arguments">Changing method arguments</h4>

<p>Ruby convention is to not change any arguments unless the method ends in <code class="highlighter-rouge">!</code>. A useful method to work with arguments but to make sure they aren’t changed is <code class="highlighter-rouge">dup</code>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sentence = sentence.dup 
</code></pre></div></div>

<p>So the variable sentence is a reference type (the address of memory in Ruby). <code class="highlighter-rouge">dup</code> will create a new object on the heap and return the address of this object. The original will not be changed and the original <code class="highlighter-rouge">sentence</code> will still hold the address of the original object.</p>

<p>Numbers and symbols can’t be <code class="highlighter-rouge">dup</code>ed.</p>

<h3 id="while-and-until">while and until</h3>

<p>It is better to use an iterator instead of <code class="highlighter-rouge">while</code> and <code class="highlighter-rouge">until</code></p>

<h3 id="self">self</h3>

<p><code class="highlighter-rouge">self</code> is a special variable and can be used within a class to represent the object upon which this method is being called.</p>

<h3 id="collect">collect</h3>

<p><code class="highlighter-rouge">collect</code> is very similar to <code class="highlighter-rouge">each</code> in that it returns an iterator. The difference is that <code class="highlighter-rouge">collect</code> keeps the answer the block gives back and adds it to a new array.</p>

<p>The following code iterates over an array, operating on each item and returning the results in a corresponding array.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>catsandtips = [0.12, 0.63, 0.09].collect { |catcost| catcost + ( catcost * 0.20 ) }
</code></pre></div></div>

<h3 id="inheritance">Inheritance</h3>

<p>This is denoted using a single angle bracket <code class="highlighter-rouge">&lt;</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class ToastyBear &lt; Object; end
</code></pre></div></div>

<p>Here the “inheritance from <code class="highlighter-rouge">Object</code>” is actually unnecessary since all objects in Ruby will inherit from <code class="highlighter-rouge">Object</code> by default. Although you can extend the default classes in Ruby directly, inheritance can also be used to extend and existing type and add your own methods. This way the original is not affected.</p>

<p>The method <code class="highlighter-rouge">is_a?</code> can be used to check the type of an object.</p>

<p><code class="highlighter-rouge">MyObject.superclass</code> can be called on any object to determine the inheritance hierarchy. Every object in Ruby derives from the <code class="highlighter-rouge">Object</code> class.</p>

<h3 id="modules">Modules</h3>

<p>Modules can be used to group code, similar to namespaces. The <code class="highlighter-rouge">extend</code> keyword is used to pull all methods from a module into a class or object.</p>

:ET