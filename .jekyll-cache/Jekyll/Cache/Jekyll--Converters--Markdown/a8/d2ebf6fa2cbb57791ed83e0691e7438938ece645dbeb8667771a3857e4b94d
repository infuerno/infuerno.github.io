I";b<h2 id="introduction">Introduction</h2>

<dl>
  <dt>: Linux</dt>
  <dt>Kernel or core software</dt>
  <dd>
    <p>Distribution
e.g. Suse, Redhat, Ubunto</p>
  </dd>
</dl>

<ul>
  <li><code class="highlighter-rouge">uname -r</code> will report the kernel version</li>
  <li>
    <p><code class="highlighter-rouge">lsb_release -a</code> will usually report the release</p>
  </li>
  <li><code class="highlighter-rouge">ctrl-shift-+</code> to enlarge the font</li>
  <li><code class="highlighter-rouge">ctrl-l</code> clear screen</li>
  <li>
    <p><code class="highlighter-rouge">ctrl-d</code> exit terminal</p>
  </li>
  <li><code class="highlighter-rouge">free</code> to give you memory usage</li>
  <li><code class="highlighter-rouge">free -m</code> to give memory usage in bytes</li>
</ul>

<h2 id="determine-hardware-settings">Determine Hardware Settings</h2>

<p>Physical consoles are number tty1 to tty6. Psuedo terminals represent logical terminals such as GUI or X-Terminals and those made from SSH clients.</p>

<ul>
  <li><code class="highlighter-rouge">tty</code> to show which terminal you are connected to</li>
  <li><code class="highlighter-rouge">who</code> or <code class="highlighter-rouge">w</code> to show people connected to the terminals</li>
  <li><code class="highlighter-rouge">ctrl-alt-f1</code> to go to tty1 etc or <code class="highlighter-rouge">sudo chvt 1</code> from a terminal</li>
  <li><code class="highlighter-rouge">ctrl-alt-f7</code> to return to the graphical environment (or <code class="highlighter-rouge">sudo chvt 7</code>)</li>
</ul>

<h3 id="resource-interrogation">Resource Interrogation</h3>

<ul>
  <li><code class="highlighter-rouge">lsusb</code>, <code class="highlighter-rouge">lspci</code>, <code class="highlighter-rouge">lsscsi</code> to list the contents of various buses</li>
  <li><code class="highlighter-rouge">free</code> shows memory available</li>
  <li><code class="highlighter-rouge">uname</code> to interrogate the kernel</li>
  <li><code class="highlighter-rouge">uptime</code> to see how long the system has been running</li>
  <li><code class="highlighter-rouge">hwinfo</code> shows information on the hardware</li>
</ul>

<h3 id="pseudo-file-systems">Pseudo File Systems</h3>

<p>These “file systems” contain information about the currently running system. It only exists while the system is running and only in RAM.</p>
<ul>
  <li><code class="highlighter-rouge">/dev</code> the actual devices as they are connected and can be created dynamically</li>
  <li><code class="highlighter-rouge">/sys</code> has metadata about these devices</li>
  <li><code class="highlighter-rouge">/proc</code> information about the current control set / running processes
    <ul>
      <li>e.g. <code class="highlighter-rouge">/proc/meminfo</code> shows full version of the info from <code class="highlighter-rouge">free</code></li>
      <li>e.g. <code class="highlighter-rouge">/proc/interrupts</code> shows interrupts to the processor; indexes 1-15 are hardware interrupts, above 15 are software interrupts; number of interrupts per second is a useful indication of how busy a cpu is
        <ul>
          <li><code class="highlighter-rouge">head -n 10 /proc/interrupts</code> shows just the first 10 entries</li>
          <li><code class="highlighter-rouge">watch -n1 head -n 10 /proc/interrupts</code> will show you a watch which refreshes every second</li>
        </ul>
      </li>
      <li>e.g. <code class="highlighter-rouge">/proc/&lt;number&gt;</code> represents a running process; 1 is always the <code class="highlighter-rouge">init</code> process; this list the resources this process is currently using</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">ps</code> shows the process of the current shell</li>
  <li><code class="highlighter-rouge">alt-f2</code> to open a graphical application finder</li>
</ul>

<h2 id="managing-the-boot-loader-and-understanding-run-levels">Managing the Boot Loader and Understanding Run Levels</h2>

<ul>
  <li><code class="highlighter-rouge">shutdown -r now</code> to reboot the system immediately</li>
  <li><code class="highlighter-rouge">shutdown -r +5</code> to reboot in 5 minutes time</li>
  <li><code class="highlighter-rouge">shutdown -r 18:27</code> to reboot in 5 minutes time</li>
  <li><code class="highlighter-rouge">shutdown -r +5 &amp;</code> to background this job</li>
  <li><code class="highlighter-rouge">shutdown -c</code> to cancel any shutdown jobs</li>
  <li>
    <p><code class="highlighter-rouge">shutdown -h</code> to poweroff or halt the system</p>
  </li>
  <li><code class="highlighter-rouge">jobs</code> to show a list of background jobs</li>
  <li>
    <p><code class="highlighter-rouge">fg</code> to bring any background jobs to the foreground</p>
  </li>
  <li><code class="highlighter-rouge">runlevel</code> to show the current run level, or <code class="highlighter-rouge">who -r</code></li>
  <li><code class="highlighter-rouge">init 6</code> will also reboot</li>
</ul>

<h3 id="bootloader">Bootloader</h3>

<p>The bootloader or bootstrap file is responsible for loading the kernel into memory. It may be located on the network (PXE boot) or in the master boot record.</p>

<ul>
  <li>GRUB Legacy is used on many enterprise systems</li>
  <li>GRUB2 will utlimately replace this</li>
  <li>EXTLINUX e.g. as used by Citrix Xen Server</li>
  <li>LILO older bootloader</li>
</ul>

<p>At the grub boot menu enter <code class="highlighter-rouge">e</code> to edit an entry or <code class="highlighter-rouge">c</code> to go to a grub command line</p>

<h3 id="run-levels-and-init">Run Levels and Init</h3>

<p>There are usually 6 run levels: 0 (Halt); 1 (Single User - root only); 2 (Multi-user, no network or GUI - though Ubuntu tends to use 2 for normal mode); 3 (Multi-user, no GUI); 4 is not implemented; 5 (Multi-user); 6 (Reboot)</p>

<p>When the system boots the init daemon reads a file to find the default run level. The old SysV init scripts used to work with <code class="highlighter-rouge">/etc/inittab</code> to specify the default run level and then directories such as /etc/rc3.d for the service scripts.</p>

<p>Newer distros use <code class="highlighter-rouge">upstart</code> and the <code class="highlighter-rouge">/etc/init</code> directory. e.g. on Ubuntu the default run level is set in <code class="highlighter-rouge">/etc/init/rc-sysinit.conf</code></p>

<p>The boot menu can be configured by editing the <code class="highlighter-rouge">/etc/boot/menu.lst</code> file. Further command line options can be specified here, or after the boot menu has loaded e.g. <code class="highlighter-rouge">3</code> to enter run level 3; <code class="highlighter-rouge">init=/bin/bash</code> to just load up bash (handy for resetting a root password if unknown since this will automatically log you in)</p>

<h3 id="service-control">Service Control</h3>

<ul>
  <li><code class="highlighter-rouge">service &lt;name&gt; start|stop|restart|status</code> (links to the service scripts in <code class="highlighter-rouge">/etc/init.d</code>)</li>
  <li><code class="highlighter-rouge">chkconfig</code> on Red Hat, SUSE and CentOS machines this will allow you to set the auto start options for a service e.g. <code class="highlighter-rouge">chkconfig &lt;name&gt; off</code> to remove a service from auto starting (this is actually just creating and removing symbolic links from the individual run level directories)</li>
  <li><code class="highlighter-rouge">update-rc.d</code> on Debian and Ubuntu machines e.g. <code class="highlighter-rouge">rc-update.d &lt;name&gt; defaults</code> to enable, <code class="highlighter-rouge">rc-update.d &lt;name&gt; remove</code> to disable</li>
  <li><code class="highlighter-rouge">netstat -antl</code></li>
</ul>

<h2 id="software-and-package-management">Software and Package Management</h2>

<h3 id="red-hat--centos--fedora">Red Hat / CentOS / Fedora</h3>

<ul>
  <li>.rpm files and software management</li>
  <li>
    <p>YUM repos</p>
  </li>
  <li>rpm database at <code class="highlighter-rouge">/var/lib/rpm</code></li>
  <li><code class="highlighter-rouge">rpm -qa</code> to list all rpms installed on a device</li>
  <li><code class="highlighter-rouge">rpm -i &lt;name&gt;</code> to install an rpm</li>
  <li><code class="highlighter-rouge">rpm -e &lt;name&gt;</code> to remove an rpm</li>
  <li><code class="highlighter-rouge">yum</code> allows you to install from a repo without knowing path to file or dependencies e.g. <code class="highlighter-rouge">yum install &lt;packagename&gt;</code></li>
  <li><code class="highlighter-rouge">rpm -qpi &lt;name&gt;</code> where q=query, p=package (rather than something installed), i=info to get package information</li>
  <li><code class="highlighter-rouge">rpm -qpl &lt;name&gt;</code> where l=list to show which files will be installed</li>
  <li><code class="highlighter-rouge">rpm -i !$</code> to install (where <code class="highlighter-rouge">!$</code> is the last argument given in the history)</li>
  <li><code class="highlighter-rouge">rpm -ql</code> will then list files in the installed package by querying the rpm database</li>
  <li><code class="highlighter-rouge">rpm -qf $(which nmap)</code> where f=file will tell you which package a file comes from (with $() feeding the result from the parentheses to the rpm -qf command)</li>
</ul>

<p>The problem with installing packages this way is that you need to first locate the rpm file in order to install it. Furthermore, if the rpm has any dependencies, these will need to be downloaded and installed alongside. The YUM repos answers these issues by resolving any dependencies.</p>

<h3 id="debian--ubuntu">Debian / Ubuntu</h3>

<ul>
  <li>.deb files and dpkg software management</li>
  <li><code class="highlighter-rouge">dpkg-reconfigure</code> to reconfigure the package if allowed</li>
  <li>
    <p>apt repos</p>
  </li>
  <li>deb database at <code class="highlighter-rouge">/var/lib/dpkg</code></li>
  <li><code class="highlighter-rouge">dpkg -L</code> to list all debs installed</li>
  <li><code class="highlighter-rouge">dpkg -i &lt;name&gt;</code> to install</li>
  <li>
    <p><code class="highlighter-rouge">dpkg -r &lt;name&gt;</code> to remove a package</p>
  </li>
  <li><code class="highlighter-rouge">apt-get update</code> to update the local cache at /var/cache/apt/archives</li>
  <li><code class="highlighter-rouge">apt-cache search &lt;query&gt;</code> to search the cache</li>
  <li><code class="highlighter-rouge">apt-cache pkgnames &lt;query&gt;</code> to seach just the package names in the cache</li>
  <li>/etc/apt/sources.list contains the urls to the deb package sources</li>
</ul>

<h3 id="susu--opensuse">SUSU / openSUSE</h3>
<ul>
  <li>.rpm files and software management</li>
  <li>zypper repos</li>
</ul>

<h2 id="management-of-shared-software-libraries">Management of Shared Software Libraries</h2>

<p>Developers can make use of shared libraries to stop code duplication
DLLs in Windows, .so or .ko in Linux</p>

<ul>
  <li><code class="highlighter-rouge">.so</code> are standard modules used by user space programs</li>
  <li>
    <p><code class="highlighter-rouge">.ko</code> are kernel modules used by the kernel or privileged programs</p>
  </li>
  <li><code class="highlighter-rouge">ldd /bin/ls</code> to list shared libraries for ls</li>
  <li><code class="highlighter-rouge">lsmod</code> to list loaded kernel modules</li>
  <li><code class="highlighter-rouge">/etc/ld/so.conf</code> maintains PATH to search for modules</li>
</ul>

<p>So, for example, <code class="highlighter-rouge">ls</code>, <code class="highlighter-rouge">grep</code>, and <code class="highlighter-rouge">cat</code> all need to access the file system and will all use <code class="highlighter-rouge">libc.so.6</code> in order to do that.</p>

<ul>
  <li><code class="highlighter-rouge">/etc/ld.so.conf</code> maintains the system path to the shared libraries.</li>
  <li>Run <code class="highlighter-rouge">ldconfig</code> to rebuild this path if the conf file is changed.</li>
  <li><code class="highlighter-rouge">ldconfig -p</code> to list all modules in the module path</li>
</ul>

<p>To test libraries under development, create a new directory to hold the libraries and set the LD_LIBRARY_PATH variable. Reviewing with <code class="highlighter-rouge">ldd</code> will reveal that the system will check the LD_LIBRARY_PATH location first for any modules required. Unset a variable with <code class="highlighter-rouge">unset</code> e.g. <code class="highlighter-rouge">unset LD_LIBRARY_PATH</code></p>

<ul>
  <li><code class="highlighter-rouge">lsmod</code> lists all loaded modules (which checks is a more convenient way to check <code class="highlighter-rouge">/proc/modules</code>)</li>
  <li><code class="highlighter-rouge">modprobe</code> can be used to load and unload modules</li>
  <li><code class="highlighter-rouge">modprobe -r &lt;module&gt;</code> to unload a module (using <code class="highlighter-rouge">rmmod</code>)</li>
  <li><code class="highlighter-rouge">modprobe &lt;module&gt;</code> to load a module (using <code class="highlighter-rouge">insmod</code>)</li>
  <li><code class="highlighter-rouge">modprobe -v &lt;module&gt;</code> to load a module and include dependencies and path to the actual module loaded</li>
  <li><code class="highlighter-rouge">modinfo -d &lt;module&gt;</code> to show a short description of the module</li>
  <li><code class="highlighter-rouge">modinfo &lt;module&gt;</code> to show complete information</li>
  <li><code class="highlighter-rouge">modinfo -p &lt;module&gt;</code> to show possible parameters</li>
</ul>

<p>To load a module with additional paramters, create a .conf file in <code class="highlighter-rouge">/etc/module.d/</code> according to the documentation</p>

<p><code class="highlighter-rouge">/etc/modprobe.d/blacklist.conf</code> lists any modules which should never be loaded</p>

<h2 id="linux-file-system">Linux File System</h2>

<p>A disk is often partitioned.</p>

<p>An MBR partition table allows for a maximum of 4 Primary partitions per disk and a maximum of 2TB per partition. One of the primary partitions can be a logical partitions and with a maximum of 15 partitions in total. (Uses <code class="highlighter-rouge">msdos</code> as the partition label.)</p>

<p>A GPT partition table - GUID partition table allows partitions of up to 8ZB in size and a maximum of 128 partitions. (Uses <code class="highlighter-rouge">gpt</code> as the partition label.)</p>

<p>Partitions are then formatted using file systems.</p>

<h3 id="creating-partitions">Creating partitions</h3>

<ul>
  <li><code class="highlighter-rouge">fdisk</code> - used both in windows and linux</li>
  <li><code class="highlighter-rouge">fdisk -l</code> to list the partitions and information</li>
  <li><code class="highlighter-rouge">parted /dev/sda print</code> does the same</li>
  <li>parted - supports both MBR and GPT partition tables</li>
  <li>gdisk - replaces fdisk</li>
  <li>lsblk - reports partitions</li>
  <li><code class="highlighter-rouge">parted /dev/sdb mklabel gpt</code> to create a gpt partion table on the /dev/sdb device</li>
</ul>

<h3 id="choosing-a-file-system">Choosing a file system</h3>

<p>For general use ext4. This is a journaled file system which maintains a journal of transactions. If the system crashes the journal can be checked to find out which files were in use and only the integrity of these files need be checked. This is a good choice for small files e.g. 4K, but not for bigger files e.g. 1GB.</p>

<p>XFS will be the default on Red Hat 7 and is designed for large files and for robustness. <code class="highlighter-rouge">mkfs</code> is used to make the file systems.</p>

<h3 id="creating-file-systems">Creating file systems</h3>

<p><code class="highlighter-rouge">mkfs</code> is used to create file systems. Use tab completion on <code class="highlighter-rouge">mkfs.</code> to see the different possibilities. Packages may need to be installed e.g. XFS.
When creating a file system, one parameter which can be set is the block size. e.g. 4096 bytes. If you try to save a 1KB file it will be saved to a 4K block and the rest of the space will be empty. If you save an 8K file, it will be saved to 2 4K blocks and may be fragmented.</p>

<ul>
  <li><code class="highlighter-rouge">mkfs.ext4 -b 4096 /dev/sdb</code></li>
  <li><code class="highlighter-rouge">mkfs.xfs -b size=64k /dev/sdb</code> - block size will be set in bytes, but can conveniently be specified in kB</li>
</ul>

<h3 id="mounting-file-systems">Mounting file systems</h3>

<ul>
  <li><code class="highlighter-rouge">mount</code> to mount a file system</li>
  <li><code class="highlighter-rouge">umount</code> to unmount a file system - can do this by mount point or by device name</li>
  <li>To mount file systems on boot, add entries to <code class="highlighter-rouge">/etc/fstab</code></li>
  <li><code class="highlighter-rouge">mount -a</code> to mount any file systems which should be mounted</li>
  <li><code class="highlighter-rouge">mount -o remount /data</code> to remount a file system which is already mounted (e.g. after changes to <code class="highlighter-rouge">/etc/fstab</code>)</li>
  <li><code class="highlighter-rouge">blkid /dev/sdb1</code> shows the UUID of a block which can alternatively be used to mount (or put into fstab)</li>
  <li>[NOTE: in vi using <code class="highlighter-rouge">r ! &lt;command&gt;</code> will insert the result of a command into the document]</li>
</ul>

<h2 id="virtual-memory-and-file-system-tools">Virtual Memory and File System Tools</h2>

<ul>
  <li>A swap file can be a disk partion or a swap file (less performant).</li>
  <li>Swap partitions can be created in the same way as creating normal partions e.g. using fdisk, parted or gdisk</li>
  <li>Once created the system may need to be rebooted in order to synchronise (or use <code class="highlighter-rouge">partprobe</code> as a shortcut to synchronise).</li>
  <li>To format the swap partition use <code class="highlighter-rouge">mkswap</code> e.g. <code class="highlighter-rouge">mkswap /dev/sdb3</code>.</li>
  <li>Mount the swap partition using <code class="highlighter-rouge">swapon</code> e.g. <code class="highlighter-rouge">swapon /dev/sdb3</code> (options priority <code class="highlighter-rouge">-p</code> flag)</li>
  <li>Use <code class="highlighter-rouge">swapon -s</code> to report on the swap space status</li>
  <li>Remove the swap partition using <code class="highlighter-rouge">swapoff</code> e.g. <code class="highlighter-rouge">swapoff /dev/sdb3</code></li>
  <li>Again use <code class="highlighter-rouge">fstab</code> to ensure swap partitions are mounted all the time.</li>
  <li>Use <code class="highlighter-rouge">swapon -a</code> to mount any swap file systems which should be mounted.</li>
</ul>

<h2 id="tools">Tools</h2>

<ul>
  <li><code class="highlighter-rouge">df</code> shows disk usage, use with <code class="highlighter-rouge">-h</code> flag to make more readable, <code class="highlighter-rouge">-l</code> limits the information to local disks</li>
  <li><code class="highlighter-rouge">du</code> shows disk usage of particular directories, again use with <code class="highlighter-rouge">-h</code> for more readable output</li>
</ul>

<h2 id="controlling-access-to-file-systems">Controlling Access to File Systems</h2>

<h3 id="permissions">Permissions</h3>

<p>Permission can be set using symbolic notation (<code class="highlighter-rouge">chmod g+x file1</code>) or octal notation (<code class="highlighter-rouge">chmod 777 file1</code>) to the user, the group or others.</p>

<ul>
  <li><code class="highlighter-rouge">chmod</code> - change mode</li>
  <li><code class="highlighter-rouge">chown</code> - change owner, must be done as root</li>
  <li><code class="highlighter-rouge">chgrp</code> - change group, must be done as root e.g. <code class="highlighter-rouge">chgrp users /data</code></li>
  <li><code class="highlighter-rouge">stat</code> - view file permissions by looking directly at the inode (instead of using <code class="highlighter-rouge">ls -l</code>)</li>
  <li><code class="highlighter-rouge">umask</code> - control default permissions by specifying the default mask e.g. <code class="highlighter-rouge">umask 002</code> sets permissions to remove write permissions for others; <code class="highlighter-rouge">umask 077</code> sets default to remove all permissions for group and others</li>
  <li><code class="highlighter-rouge">id</code> - shows the group the current user belongs to e.g. <code class="highlighter-rouge">uid=1000(jharvard) gid=1000(students) groups=1000(students)</code></li>
  <li><code class="highlighter-rouge">mkdir -p data/dir{1,2,3}</code> - create directories <code class="highlighter-rouge">data/dir1</code>, <code class="highlighter-rouge">data/dir2</code>, <code class="highlighter-rouge">data/dir3</code></li>
  <li><code class="highlighter-rouge">ls -ld .</code> to show the permissions of a directory (execute permissions are included by default since you need these permissions to enter a directory)</li>
  <li>File creation and deletion permissions are controlled by the permission on the directory</li>
  <li>The sticky bit is a permission bit which can be set on a directory that allows only the owner of a file within the directory (or root) to delete or rename the file. i.e. you can’t create or rename a file created by some other user. It is set using the first index in the 4 octal indexes (e.g. <code class="highlighter-rouge">chmod 1755 dir1</code>) or by using <code class="highlighter-rouge">t</code> (e.g. chmod +t dir1). When showing permissions using <code class="highlighter-rouge">ls -ld</code> the final bit (shows execute for others) is either <code class="highlighter-rouge">T</code> if execute NOT set, but sticky bit is set OR <code class="highlighter-rouge">t</code> if execute and sticky bit set.</li>
</ul>

<h3 id="hard-and-soft-symbolic-or-sym-links">Hard and Soft (Symbolic or Sym) Links</h3>

<p>A filename links through to an inode which is the actual entry in the file system which contains metadata including a pointer to where the data is physically held on disk. A file has at least one name, but can have more than on name and will then have more than 1 hard link (count of hard links is shown in the <code class="highlighter-rouge">ls -l</code> listing).</p>

<p>The <code class="highlighter-rouge">ls -ld</code> long directory listing shows the number of hard links to that directory (the directory name itself, the <code class="highlighter-rouge">.</code> within the directory and the <code class="highlighter-rouge">..</code> within all the sub directories). (A quick way to count the number of sub directories is to substract 2 from the link count! To verify use <code class="highlighter-rouge">find . -maxdepth 1 -type d</code> to display all the subdirectories and pipe this through to <code class="highlighter-rouge">wc -l</code>)</p>

<p>Soft links on the other hand have seperate inodes, but the data pointer points through to the same place on the physical disk</p>

<ul>
  <li><code class="highlighter-rouge">ln file3 file4</code> creates a hard link from file3 to file4 the names file3 and file4 point at the same inode</li>
  <li><code class="highlighter-rouge">ls -li</code> shows the long listing including the inode number which shows that this is now the same for file2 and file4</li>
  <li><code class="highlighter-rouge">ln -s file3 file5</code> creates a soft / symbolic link from file3 to file5 where a seperate inode is created for file5, but the data points a the same place as for the inode for file3</li>
</ul>

<h3 id="implementing-quotas">Implementing Quotas</h3>

<p>Limits can be set in terms of blocks (space) or inodes (number of files). There are soft and hard limits. The soft limit can be exceeded, but by default only for 7 days.</p>

<p><code class="highlighter-rouge">vi +?&lt;searchterm&gt; &lt;filename&gt;</code> to open a file in vi and go directly to that line for editing
<code class="highlighter-rouge">dd if=/dev/zero of=/data/file1 count=1 bs=1024M</code> to create a file reading from <code class="highlighter-rouge">/dev/zero</code> which is a stream of 0s, and writing one file of size 1GB</p>

<p><code class="highlighter-rouge">quotacheck -cu /data</code> to create user quota files for the /data file system. This will create an aquota.user file in the root of the file system, which is the quota database
<code class="highlighter-rouge">repquota -auv</code> reports the quota usage
<code class="highlighter-rouge">quotaon /dev/sdb1</code> will enable running the quota check continuously (which would happen on boot by default)
<code class="highlighter-rouge">edquota -u claire</code> will open an editor to allow editing the quota limits
<code class="highlighter-rouge">setquota -u claire 20000 25000 0 0 /dev/sdb1</code> allows setting quota limits in a one line command
<code class="highlighter-rouge">edquota -t</code> to edit the grace period of the soft limit</p>

:ET