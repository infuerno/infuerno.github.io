I"=<h2 id="strings-and-regular-expressions">Strings and Regular Expressions</h2>

<p><code class="highlighter-rouge">"string"</code>, <code class="highlighter-rouge">%Q{string}</code> use double quotes for interpolation, %Q lets you have double quotes in your interpolated string
<code class="highlighter-rouge">'string'</code>, <code class="highlighter-rouge">%q{string}</code> use single quotes for everything else (faster)</p>

<p><code class="highlighter-rouge">'a@b.com' =~ /(.*)@(.*)\.com$/i</code> to match a string against a regex</p>
<ul>
  <li><code class="highlighter-rouge">i</code> ignore case</li>
  <li>if no match, value is false</li>
  <li>if match, value is non-false, and $1..$n capture groups</li>
  <li><code class="highlighter-rouge">%r{(.*)$}i</code> not seen v often</li>
  <li><code class="highlighter-rouge">Regex.new('(.*)$', Regexp::IGNORECASE)</code></li>
</ul>

<h2 id="objects-methods">Objects, methods</h2>

<p><code class="highlighter-rouge">nil.methods</code> to list methods for an object
<code class="highlighter-rouge">nil.respond_to?(:to_s)</code> to check if an object will respond to a particular method
<code class="highlighter-rouge">3+4</code> is shorthand for <code class="highlighter-rouge">3.+(4)</code>
<code class="highlighter-rouge">3.send(:+, 4)</code> alternatively uses the <code class="highlighter-rouge">send</code> method to send an operation and parameters to an object
<code class="highlighter-rouge">arr.[]=(4, "box")</code> is the same as <code class="highlighter-rouge">arr[4] = "box"</code></p>

<h2 id="classes-and-inheritance">Classes and Inheritance</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class SavingsAccount &lt; Account # inheritance
  # constructor used when SavingsAccount.new(...) called
  def initialize(balance=0) # optional argument
    @balance = balance      # note instance v local variable
  end
  def balance # instance method
    @balance  # instanc var is visible only to this object hence needs a getter
  end
  def balance=(new_amount) # note the method name for a setter
    @balance = new_amount
  end
  def deposit(amount)
    @balance += amount
  end
  @@bank_name = "MyBank.com" # class (static) variable
  # a class method
  def self.bank_name # use self. for a class method
    @@bank_name
  end
  # or
  # def SavingsAccount.bank_name ; @@bank_name ; end
end
</code></pre></div></div>

<h3 id="accessors">Accessors</h3>

<p><code class="highlighter-rouge">attr_accessor</code>, <code class="highlighter-rouge">attr_reader</code> and <code class="highlighter-rouge">attr_writer</code> save having to write explicit getters and setters in the case these methods donâ€™t do anything interesting. These are examples of <em>metaprogramming</em> in Ruby in that the keyword constructs are replaced by actual getters and setters at run time.</p>

:ET