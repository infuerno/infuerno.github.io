I"Û
<h2 id="automating-memory-dump-generation">Automating Memory Dump Generation</h2>

<ol>
  <li>Open performance monitor to set up collection of a new data set</li>
  <li>Create a new user defined data collector set</li>
  <li>Choose performance counter alert</li>
  <li>Identify performance counter to monitor e.g. Processor &gt; % processor time to monitor CPU usage</li>
  <li>Once created, drill down to the actual data collector set and set the Alert Task to run a scheduled task by just entering the name. Also check the Alert Sample Interval on the first page is appropriate.</li>
  <li>Create a scheduled task as defined to e.g. do a memory dump using <code class="highlighter-rouge">adplus</code> e.g. <code class="highlighter-rouge">adplus -quiet -hang -pn w3wp.exe -o c:\temp</code>, send an email
    <ul>
      <li>Ensure the memory dump doesnâ€™t exacerbate the resource being monitored and if necessary stop the data collection using <code class="highlighter-rouge">logman</code> e.g. <code class="highlighter-rouge">logman stop "CPU Spike Alert"</code></li>
    </ul>
  </li>
</ol>

<h2 id="debugging-web-server-cpu-spikes">Debugging Web Server CPU Spikes</h2>

<p><a href="https://msdn.microsoft.com/en-us/windows/hardware/hh852365">https://msdn.microsoft.com/en-us/windows/hardware/hh852365</a></p>

<ul>
  <li>WinDbg - graphical interface debugger</li>
  <li>cdb - command line debugger - can generate memory dumps</li>
</ul>

<p>Download and install the Windows 7 SDK. This will create a DTW directory (Debugging Tools for Windows) in the Program Files directory with a number of tools. <code class="highlighter-rouge">adplus.vbs</code> is a script which calls <code class="highlighter-rouge">cdb.exe</code> to perform a memory dump</p>

<p>Use adplus to create a memory dump and then open in windbg.</p>

<p><code class="highlighter-rouge">!runaway</code> will list all threads and memory usage in time wrt process uptime
<code class="highlighter-rouge">.time</code> to give system and process uptime stats
<code class="highlighter-rouge">~17s</code> will set the context to the thread id 17
<code class="highlighter-rouge">k</code> to dump the native call stack (in context of previously set thread)
<code class="highlighter-rouge">!clrstack</code> to show managed code (NOTE this command is available in the sos dll so needs to be loaded using <code class="highlighter-rouge">.loadby sos clr</code>)
<code class="highlighter-rouge">!name2ee * [modulename].[symbolname]</code> e.g. RandomBehaviour.SpinLoop will enumerate through all assemblies (as indicated by the *) 
<code class="highlighter-rouge">!savemodule 00ed5560 c:\temp\buggy-code.dll</code> will save the dll to file so it can be loaded by e.g. .NET reflector and the reflected code analysed</p>

:ET