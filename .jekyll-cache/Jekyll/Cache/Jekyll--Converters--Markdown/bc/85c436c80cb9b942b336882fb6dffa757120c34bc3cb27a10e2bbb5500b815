I"◊0<p>07557267417
QDGxqQ2K</p>

<h2 id="ip---internet-protocol">IP - Internet Protocol</h2>

<p>Method for addressing every computer on the internet. 
DNS - Domain Name Server - has mapping of URLs to IP addresses and vice versa. Use <code class="highlighter-rouge">nslookup</code> to query DNS.</p>

<h2 id="tcp---transmission-communication-protocol">TCP - Transmission Communication Protocol</h2>

<p>Method for sending information between computers on the internet with reliabiity that whole message will be delivered. It will also divide the message into multiple segments.</p>

<h2 id="http">HTTP</h2>

<p>Protocol which web browers use to talk to web servers.</p>

<p>GET / HTTP/1.1
Host: www.google.com
‚Ä¶</p>

<p>HTTP/1.1 200 OK
Content-Type: text/html
‚Ä¶</p>

<h2 id="php-syntax">PHP Syntax</h2>

<ul>
  <li>Use the following to demarquate php code to be interpreted by the php interpreter.
  <?php ... ?></li>
  <li>All variables start with a dollar sign e.g. <code class="highlighter-rouge">$x = 4;</code> <code class="highlighter-rouge">$s = "hello";</code></li>
  <li>Types are implicit, not explicit</li>
  <li>Functions are declared using the <code class="highlighter-rouge">function</code> keyword e.g. <code class="highlighter-rouge">function f() { ... }</code></li>
  <li>Functions do not specify a return type and can return different types at run time as required</li>
  <li>Declare arrays using e.g. <code class="highlighter-rouge">$a = array(1, 2, 3);</code> <code class="highlighter-rouge">$a = [1, 2, 3];</code> <code class="highlighter-rouge">$a = [];</code></li>
  <li>Declare associative arrays using e.g. <code class="highlighter-rouge">$h = ["a" =&gt; "apple", "b" =&gt; "banana"];</code> <code class="highlighter-rouge">$h = [];</code></li>
  <li>Add a new element to an array using e.g. <code class="highlighter-rouge">$a[] = 4;</code></li>
  <li>Add a new element to an associate array using e.g. <code class="highlighter-rouge">$h["c"] = "cat";</code></li>
  <li>The function <code class="highlighter-rouge">count</code> returns the number of elements in an array e.g. <code class="highlighter-rouge">count($a);</code></li>
  <li>Single or double quotes can be used for creating strings</li>
  <li>The dot operator concatenates strings e.g. <code class="highlighter-rouge">$n = 5; $s = 'n is '.$n;</code></li>
  <li>Single or double quotes can be used in the example above.</li>
  <li>Variables are interpreted when used in double quoted strings e.g. <code class="highlighter-rouge">"n is $n"</code> will become <code class="highlighter-rouge">"n is 5"</code></li>
  <li>Variables are not interpreted when using single quotes e.g. <code class="highlighter-rouge">'n is $n'</code> still remain <code class="highlighter-rouge">"n is $n"</code></li>
  <li>To include values of arrays in strings use {} e.g. <code class="highlighter-rouge">"{h['c']}"</code> would give ‚Äúcat‚Äù</li>
  <li>
    <p><code class="highlighter-rouge">foreach</code> loops are useful in php. Note the order of elements in the declaration</p>

    <p><?php
  $array = [1, 2, 3];
  foreach($array as $number)
      print($number . "\n");
  ?></p>
  </li>
  <li>
    <p><code class="highlighter-rouge">require_once</code> copies the contents of one file into another file</p>

    <p>require_once(<strong>DIR</strong> . ‚Äú/math.php‚Äù);
  print(add(1, 2) . ‚Äú\n‚Äù);</p>
  </li>
  <li><strong>DIR</strong> is a special constant for the current directory, so this file is in the same directory as <code class="highlighter-rouge">math.php</code></li>
</ul>

<h2 id="css">CSS</h2>

<ul>
  <li>A <code class="highlighter-rouge">CSS rule</code> is usually a <code class="highlighter-rouge">selector</code> followed by <code class="highlighter-rouge">declarations</code> to determine the style</li>
  <li><code class="highlighter-rouge">Combinators</code> let you join multiple <code class="highlighter-rouge">simple selectors</code></li>
  <li>Simple selectors include:
    <ul>
      <li>ID selectors i.e. #</li>
      <li>tag selectors e.g. h1</li>
      <li>class selectors e.g. .box</li>
      <li>attribute selectors e.g. [type=‚Äùradio‚Äù] to target e.g. <input type="radio" /></li>
      <li>pseudoselectors for specificing styling when interations occur e.g. h1:hover</li>
    </ul>
  </li>
  <li>Combinators include:
    <ul>
      <li>whitespace for children</li>
      <li>commas to distinguish selectors</li>
      <li><code class="highlighter-rouge">&gt;</code> for direct children only</li>
      <li><code class="highlighter-rouge">~</code> for sibling elements</li>
      <li><code class="highlighter-rouge">+</code> for the one sibling which comes directly after another element</li>
    </ul>
  </li>
</ul>

<h2 id="html">HTML</h2>

<p>Not a programming language, a markup language.</p>

<h2 id="php">PHP</h2>

<p>Find in your environment the interpreter for php</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env php</span>
</code></pre></div></div>

<p>Print out post variables using</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> <span class="nb">print_r</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">);</span> <span class="cp">?&gt;</span>
</code></pre></div></div>

<p>Where <code class="highlighter-rouge">print_r</code> is a recursive print function and <code class="highlighter-rouge">$_POST</code> is a special variable, a super global, which holds the post variables. They can be indexed into using square brackets e.g. <code class="highlighter-rouge">$_POST["name"]</code>. The function <code class="highlighter-rouge">empty</code> can be used to check if a variable has a function e.g. <code class="highlighter-rouge">empty($_POST["name"])</code></p>

<p>To send email use:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>require("libphp-phpmailer/class.phpmailer.php");

$mail = new PHPMailer();
$mail-&gt;IsSMTP();
$mail-&gt;Host ="smtp.fas.harvard.edu";
$mail-&gt;Port = 587;
$mail-&gt;SMTPSecure = "tls";

$mail-&gt;SetFrom("jharvard@cs50.harvard.edu");
$mail-&gt;AddAddress("jharvard@cs50.harvard.edu");
$mail-&gt;Subject("Registration");
$mail-&gt;Body = 
    "This person just registered:\n\n" .
    "Name: " . $_POST["name"] . "\n";

if ($mail-&gt;Send() == false)
{
    die($mail-&gt;ErrInfo);
}
</code></pre></div></div>

<h3 id="superglobals">Superglobals</h3>

<p>$_COOKIE
$_GET
$_POST
$_SERVER
$_SESSION
‚Ä¶</p>

<h3 id="sessions">Sessions</h3>

<p>Sessions need to be started before they can be used.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>session_start();
if (isset($_SESSION["counter"]))
{
    $counter = $_SESSION["counter"];
}
else
{
    $counter = 0;
}

// increment counter
$_SESSION["counter"] = $counter + 1;
</code></pre></div></div>

<h3 id="parameters-to-functions">Parameters to functions</h3>

<p>You can pass in arbitrary key value pairs to functions where the key indicates the name of an argument and the value indicates the value to pass for that argument. E.g.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>renderHeader(["title" =&gt; "CS50"]);
</code></pre></div></div>

<p>and the square brackets incidate that an associative array is being passed in, so multiple values are possible. E.g.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>renderHeader(["title" =&gt; "CS50", "week" =&gt; 0]);
</code></pre></div></div>

<p>The definition of this function may be:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function renderHeader($data = [])
{
    extract($data); 
}
</code></pre></div></div>

<p>where <code class="highlighter-rouge">extract($data)</code> takes all the keys and creates variables for them.</p>

<h3 id="misc">Misc</h3>

<ul>
  <li><code class="highlighter-rouge">htmlspecialchars($title)</code> is a special function which renders any dangerous characters harmless.</li>
  <li>Use <code class="highlighter-rouge"><span class="cp">&lt;?=</span> <span class="nx">...</span> <span class="cp">?&gt;</span></code> as a shortcut to <code class="highlighter-rouge"><span class="cp">&lt;?php</span> <span class="k">print</span> <span class="o">...</span> <span class="cp">?&gt;</span></code></li>
  <li><code class="highlighter-rouge">===</code> compares operands values <em>and</em> types whereas <code class="highlighter-rouge">==</code> only compares values. So e.g. an empty array will evaluate to false so <code class="highlighter-rouge">[] == false</code> will be <code class="highlighter-rouge">true</code> whereas <code class="highlighter-rouge">[] === false</code> will be <code class="highlighter-rouge">false</code>.</li>
</ul>

<h3 id="file-permissions">File permissions</h3>

<ul>
  <li>PHP files should have <code class="highlighter-rouge">600</code> so that you (and the webserver) can read and write to it (visitors should not be able to see php files, only the result of executing them) - for security reasons, php web pages are interpreted by ‚Äúyou‚Äù (using suPHP and Apache on the appliance)</li>
  <li>Non PHP files should have <code class="highlighter-rouge">644</code> so that you can read and write, others can read and execute</li>
  <li>Directories should have <code class="highlighter-rouge">711</code> so that you can read, write and execute and everyone else can only execute</li>
</ul>

<h2 id="stocks">Stocks</h2>

<h3 id="what-are-stocks">What are stocks?</h3>

<p>A stock is a share in the ownership of a company. Stock = Shares = Equity. Being a shareholder means you are one of the many owners of a company and as such have a claim to everything the company owns. You are entitled to your share of the company‚Äôs earnings as well as any voting rights attached to the share.</p>

<p>Usually holding shares gives you an equivalent number of votes for who should be on the board of directors. Though only having a few share, and therefore a few votes won‚Äôt affect this too much.</p>

<p>Profits are sometimes paid out in the form of <em>dividends</em>. Your claim on assets is only relevant if the company goes bankrupt. In this scenario, you will only get some money back once all other creditors have been paid. Nevertheless owning shares gives you a claim on the earnings and assets.</p>

<p><em>Limited liability</em> is another important aspect of shares. You are not personally liable if the company is not able to pay its debts. Partnerships, on the other hand, do hold any <em>partners</em> liable. Shareholders only ever stand to loose their investment in shares.</p>

<p>Companies sell stocks as a way to raise money. Bank loans or issuing bonds (IOUs) are also possible and this is called <em>debt financing</em>. However, issuing stocks to raise money is <em>equity financing</em>. These type of money does not require the company to pay back the money, or pay interest. IPO - initial public offering - the first sale of stock by the company.</p>

<p>Companies do not have to pay dividends and many do not.</p>

<p>Stocks are risky, but the return has historically been good. Over the long term and investment in stocks has historically had an average return of 10-12%.</p>

<h3 id="different-types-of-stocks">Different types of stocks</h3>

<p>Common stock - as described above.</p>

<p>Preferred stock - doesn‚Äôt usually have the same voting rights (i.e. one vote per share). Investors are usually guaranteed a fixed dividend forever, and in the event of liquidation preferred shareholders and paid off before common shareholders. Preferred shares have similarity with bonds.</p>

<p>Other classes - other variants can also exist. E.g. a stock which gives voting rights of 10 votes per share.</p>

<p>When there are different classes of stock these are often referred to as <em>Class A</em> and <em>Class B</em> and these are often represented by placing a letter behind the ticker symbol e.g. BRKa and BRKb for a company whose ticker symbol is BRK.</p>

<h3 id="how-stocks-trade">How stocks trade</h3>

<h3 id="what-causes-stock-prices-to-change">What causes stock prices to change</h3>

<h3 id="buying-stocks">Buying stocks</h3>

<h3 id="how-to-read-a-stock-tablequote">How to read a stock table/quote</h3>

<h3 id="the-bulls-the-bears-and-the-farm">The Bulls, the Bears and the Farm</h3>

:ET