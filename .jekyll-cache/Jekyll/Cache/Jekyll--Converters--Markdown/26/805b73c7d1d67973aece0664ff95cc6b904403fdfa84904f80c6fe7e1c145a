I"•<h1 id="chapter-1-why-terraform">Chapter 1: Why Terraform</h1>

<blockquote>
  <p>Software isnâ€™t <em>done</em> until you ship it to the user.</p>
</blockquote>

<blockquote>
  <p>DevOps isnâ€™t the  name of a team or a job title or a particular technology. Instead its a set of processes, ideas and techniques. â€¦ The goal of DevOps is to make software delivery vastly more efficient.</p>
</blockquote>

<p>Four broad categories of IAC tools:</p>
<ol>
  <li>Ad hoc scripts - great for quick and dirty</li>
  <li>Configuration management tools - e.g. Chef, Puppet, Ansible, SaltStack - designed to install and manage software on existing servers - on multiple servers</li>
  <li>Server templating tools - alternative to config mgmt tools e.g. Docker (containers), Packer (typically prod images), Vagrant (typically dev images) - create an image containins OS, software, config - can use e.g. Ansible to install across all servers</li>
  <li>Server provisioning tools - Terraform, CloudFormation, OpenStack Heat</li>
</ol>

<p>A virtual machine (VM) emulates an entire computer system including hardware</p>
<ul>
  <li>images only see â€˜virtualised hardwareâ€™</li>
  <li>running different OSs for each VM takes a lot of resources e.g. CPU, memory, startup time</li>
</ul>

<p>A container emulate the user space of an OS</p>
<ul>
  <li>a container engine creates different processes, mount points, networking</li>
  <li>isolation isnâ€™t as secure as VMs</li>
  <li>because the kernel and hardware are shared, your containers can boot up in milliseconds and have virtually no CPU or memory overhead.</li>
</ul>

<p>Common pattern: Use Packer to create an AMI containing the Docker Engine, deploy to a cluster of servers in AWS, deploy Docker containers across the cluster.</p>

<p>Immutable infrastructure (e.g. using server images) - idea is it never changes - if you need to make changes, e.g. new version of the code - you create a new image.</p>

<h2 id="how-terraform-compares-to-other-infrastructure-as-code-tools">How Terraform Compares to Other Infrastructure as Code Tools</h2>

<ul>
  <li>Configuration management versus provisioning - tools fall into one category or the other, but some overlap - however common to a provisioning tool AND config mgmt tool</li>
  <li>Mutable infrastructure versus immutable infrastructure - generally better to use immutable approach, BUT might be a lot of overhead for minor changes</li>
  <li>Procedural language versus declarative language</li>
  <li>Master versus masterless - some tools require a master server, requires more infrastructure to deploy, maintain and secure</li>
  <li>Agent versus agentless - some tools require agents on each client machine to apply configs - bootstrapping is the most obvious issue</li>
  <li>Large community versus small community</li>
  <li>Mature versus cutting-edge</li>
</ul>

<h1 id="chapter-2-getting-started-with-terraform">Chapter 2. Getting Started with Terraform</h1>

:ET