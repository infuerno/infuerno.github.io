I"ø
<h3 id="custom-authentication">Custom Authentication</h3>

<p>Use custom authentication when you want to authenticate users against your own database, LDAP etc rather than using their windows credential. To implement a custom principal - generally only need to implement Login and Logout operations.</p>

<h4 id="custom-principal">Custom Principal</h4>

<ul>
  <li><code class="highlighter-rouge">BeginLogin</code> and <code class="highlighter-rouge">Login</code> methods take username and password, but details will vary depending on how you need to authenticate</li>
  <li>Both example methods invoke factory methods on the custom identity class</li>
  <li>No exception is thrown if the username or password is incorrect - the identity object returned will have <code class="highlighter-rouge">IsAuthenticated</code> set to false and the principal will contain no roles.</li>
  <li><code class="highlighter-rouge">Load</code> method only requires the username - used by e.g. ASP.NET to load the principal on each request once already authenticated (by calling an equivalent method on the custom identity class)</li>
</ul>

<h4 id="custom-identity">Custom Identity</h4>

<ul>
  <li>Adding lots of properties to the custom identity has a performance impact
    <ul>
      <li>either add to a custom object on the LocalContext dictionary class (doesn‚Äôt flow through)</li>
      <li>or load each time on the application server</li>
    </ul>
  </li>
  <li>Identity data access code needs to
    <ul>
      <li>verify identity</li>
      <li>load roles</li>
      <li>load any extra profile</li>
    </ul>
  </li>
</ul>

<h4 id="application-server-configuration">Application Server Configuration</h4>

<p>Discussion of how to implement loading the principal on the server EACH TIME</p>

<h4 id="client-application-configuration---aspnet-applications">Client Application Configuration - ASP.NET Applications</h4>

<p>ASP.NET provides support for authentication, including managing an encrypted user token in a cookie (or URL). The encrypted token minimally contains the username and the expiration time and (optionally contains roles, but not usually due to cookie size). ASP.NET creates a principal and identity from the authentication token, but this is minimal and doesn‚Äôt contain roles or any other profile attributes. The <code class="highlighter-rouge">CustomPrincipal</code> required by the application needs to be make available for each request.</p>

<ul>
  <li>Stateless applications - use the username from the authentication token (ASP.NET out of the box identity) to load the principal using the <code class="highlighter-rouge">Load</code> method of the <code class="highlighter-rouge">CustomPrincipal</code>.</li>
  <li>Stateful applications - keep the principal in Session - may or may not provide better performance</li>
</ul>

<p>In the <code class="highlighter-rouge">Application_AcquireRequestState</code> in the <code class="highlighter-rouge">Global.asax.cs</code> the real custom principal loaded via <code class="highlighter-rouge">CustomPrincipal.Load()</code> (which in turn sets the <code class="highlighter-rouge">Csla.ApplicationContext.User</code>) or via <code class="highlighter-rouge">CustomPrincipal.Login()</code></p>

<h3 id="membership-provider-authentication">Membership Provider Authentication</h3>

<p><code class="highlighter-rouge">CustomPrincipal</code> is same as above. <code class="highlighter-rouge">CustomIdentity</code> is similar. The data access is implemented using the ‚Äúencapsulated invoke model‚Äù (see Data Access book).</p>

<ul>
  <li>Data access code uses types from System.Web.Security - FULL .NET FRAMEWORK.</li>
  <li>However <code class="highlighter-rouge">Library.Net</code> targets the Client Profile - WHY? So to workaround the DAL provider needs to be DYNAMICALLY loaded.</li>
  <li>A DalManager is used to dynamically load these types.</li>
  <li>DataPortal_Fetch methods in the CustomIdentity call the DalManager to get the dynamically loaded implementation of the dal (IIdentityDal)</li>
  <li>The IIdentityDal wraps calls to the MembershipProvider</li>
  <li>Two calls are made to membership <code class="highlighter-rouge">Membership.VerifyUser(u, p)</code> and then <code class="highlighter-rouge">Membership.GetUser(u)</code> - HOW DOES THE INCREMENT / AUTO LOCK OUT WORK</li>
  <li>GetRolesForUser uses <code class="highlighter-rouge">Roles.Provider.GetRolesForUser</code> rather than <code class="highlighter-rouge">Roles.GetRolesForUser</code> due to a bug presumably in .NET 4 - how do we specify the Application here? Rather than have to define two / three different connection strings and therefore providers?</li>
</ul>

<h3 id="windows-authentication">Windows Authentication</h3>

<p>For ASP.NET applications using CSLA, the application must simply be configured not to perform any explicity authentication or impersonation</p>

<p>Use the Membership Roles Provider with Windows Authentication.
Screens to administer will still remain within MABO (along with Q1, Q2)</p>

:ET